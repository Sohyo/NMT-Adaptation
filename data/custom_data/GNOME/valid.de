Eitan Isaacson
eitan@ascender.com
Peter Parente
pparent@us.ibm.com
Aline Bessa
alibezz@gmail.com
Creative Commons Share Alike 3.0
5. Schnellauswahl-Plugin
Das gewünschte Objekt lokalisieren
Schnellauswahl-Plugin
4. Einstellungennext " xref="event_monitor_plugin
Accerciser
Accerciser
Accerciser
Accerciser
Einrichten von Plugins
Einstellungen für Plugins
Accerciser
Sie können den Einstellungsdialog umgehen , indem Sie ein Plugin von einem an einen anderen Ort ziehen .
Einrichten globaler Tastenkürzel
Einstellungen für globale Tastenkürzel
Einstellungen für Widget-Hervorhebungen
Einstellungen für Hervorhebungen
Accerciser
2. IPython-Plugin
Falls alles andere scheitert
IPython-Konsole-Plugin
Das IPython-Konsole-Plugin ausführen
1. Was ist Accerciser ?
Accerciser
Accerciser Accerciser
Accerciser
Accerciser
Accerciser
Accerciser
Accerciser
Informationen über Barrierefreiheit
2. Schnittstellenanzeige-Plugin
Schnittstellenanzeige-Plugin
Das Schnittstellenanzeige-Plugin ausführen
translated
Accerciser
Bevor Sie beginnen
Erste Schritte
Themen für Fortgeschrittene
3. Neue Plugins schreiben
Accerciser
Accerciser
Accerciser
Erstellen eines Basis-Plugins
Zunächst verwenden wir folgende Import-Zeilen :
from accerciser.plugin import Plugin import gtk import pyatspi
Anschließend leiten wir eine neue Klasse aus der Basis-Plugin-Klasse ab und ordnen einige obligatorische Klassenattribute zu :
class FocusSelect(Plugin ) : plugin_name = 'Focus Select ' plugin_description = 'Allows selecting last focused accessible . '
def init(self ) : pyatspi . Registry.registerEventListener(self.accEventFocusChanged , 'focus ' ) self.global_hotkeys = [ ( 'Inspect last focused accessible ' , self.inspectLastFocused , gtk.keysyms.e , gtk.gdk . CONTROL_MASK | gtk.gdk . MOD1_MASK ) ] self.last_focused = None
def accEventFocusChanged(self , event ) : if not self.isMyApp(event.source ) : self.last_focused = event.source
def inspectLastFocused(self ) : if self.last_focused : self.node.update(self.last_focused )
Erstellen eines Konsolen-Plugins
Folgende Import-Zeilen werden benötigt :
from accerciser.plugin import ConsolePlugin import pyatspi
class PushButtonFocus(ConsolePlugin ) : plugin_name = 'Push Button Focus ' plugin_description = 'Print event when pushbutton get\\'s focus . '
def init(self ) : pyatspi . Registry.registerEventListener(self.accEventFocusChanged , 'focus ' )
def accEventFocusChanged(self , event ) : if event.source.getRole( ) == pyatspi . ROLE_PUSH_BUTTON : self.appendText(str(event)+'\ ' )
import gtk from accerciser.plugin import ViewportPlugin
Danach folgt eine Klassendefinition mit Name und Beschreibung :
class Clicker(ViewportPlugin ) : plugin_name = 'Clicker ' plugin_description = 'Test the " click " action in relevant accessibles . '
def init(self ) : alignment = gtk . Alignment(0.5,0.5,0,0 ) self.click_button = gtk . Button('Click me ! ' ) alignment.add(self.click_button ) self.plugin_area.add(alignment ) self.click_button.connect('clicked ' , self.onClick ) self.show_all( )
def accSupportedActions(self ) : try : ai = self.node.acc.queryAction( ) except NotImplementedError : action_names = [ ] else : action_names = [ ai.getName(i ) for i in xrange(ai.nActions ) ] return action_names
def onAccChanged(self , acc ) : has_click = 'click ' in self.accSupportedActions( ) self.click_button.set_sensitive(has_click )
def onClick(self , button ) : ai = self.node.acc.queryAction( ) action_names = [ ai.getName(i ) for i in xrange(ai.nActions ) ] ai.doAction(action_names.index('click ' ) )
Accerciser
Accerciser
Accerciser
Accerciser
Accerciser
cd accerciser
./ autogen.sh # oder ./ configure für die Erstinstallation
make
sudo make install # oder make install als Root
Accerciser
Accerciser accerciser Eingabetaste
4. Ereignisüberwachung-Plugin
Ereignisüberwachung-Plugin
Das Ereignisüberwachung-Plugin ausführen
document
focus
mouse
object
terminal
window
1. Anwendungs-Baumansicht
Erkunden der Accessible-Hierarchie der Arbeitsumgebung
Anwendungs-Baumansicht
Lesezeichen für Objekte in der Anwendungs-Baumansicht anlegen
Accerciser Lesezeichen Lesezeichen hinzufügen Strg d
Accerciser Lesezeichen Lesezeichen verwalten
1. API-Browser-Plugin
API-Browser-Plugin
Das Schnittstellenbrowser-Plugin ausführen
Mario Blättermann
Eitan Isaacson
eitan@ascender.com
Peter Parente
pparent@us.ibm.com
Aline Bessa
alibezz@gmail.com
Creative Commons Share Alike 3.0
5. Schnellauswahl-Plugin
Das gewünschte Objekt lokalisieren
Schnellauswahl-Plugin
4. Einstellungennext " xref="event_monitor_plugin
Accerciser
Accerciser
Accerciser
Accerciser
Einrichten von Plugins
Einstellungen für Plugins
Accerciser
Sie können den Einstellungsdialog umgehen , indem Sie ein Plugin von einem an einen anderen Ort ziehen .
Einrichten globaler Tastenkürzel
Einstellungen für globale Tastenkürzel
Einstellungen für Widget-Hervorhebungen
Einstellungen für Hervorhebungen
Accerciser
2. IPython-Plugin
Falls alles andere scheitert
IPython-Konsole-Plugin
Das IPython-Konsole-Plugin ausführen
1. Was ist Accerciser ?
Accerciser
Accerciser Accerciser
Accerciser
Accerciser
Accerciser
Accerciser
Accerciser
Informationen über Barrierefreiheit
2. Schnittstellenanzeige-Plugin
Schnittstellenanzeige-Plugin
Das Schnittstellenanzeige-Plugin ausführen
translated
Accerciser
Bevor Sie beginnen
Erste Schritte
Themen für Fortgeschrittene
3. Neue Plugins schreiben
Accerciser
Accerciser
Accerciser
Erstellen eines Basis-Plugins
Zunächst verwenden wir folgende Import-Zeilen :
