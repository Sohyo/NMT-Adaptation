Anjuta IDE-Handbuch
v1.0.0
Handbuch für die Anjuta-IDE
Naba
Kumar
Andy
Piper
Biswapesh
Chattopadhyayr
Johannes
Schmid
2001-2002
2006-2008
Naba Kumar , Andy Piper , Biswapesh Chattopadhyay
Johannes Schmid
Link
Bei vielen der von Firmen zur Unterscheidung ihrer Produkte und Dienstleistungen verwendeten Namen handelt es sich um Marken . An den Stellen , an denen derartige Namen in einer GNOME-Dokumentation vorkommen und wenn die Mitglieder des GNOME-Dokumentationsprojekts über diese Marken informiert wurden , sind die Namen in Großbuchstaben oder mit großen Anfangsbuchstaben geschrieben .
Anjuta-Handbuch 2.1.0
2007
jhs@gnome.org
Anjuta-Team
Einführung
Anjuta
Anjuta DevStudio wurde entwickelt , um einfach aber doch mächtig genug zu sein , um allen Bedürfnissen eines Programmierers nachzukommen . Wir haben Anjuta im Verlauf der Entwicklung viele neue Funktionen hinzugefügt . Unser Fokus liegt auf der gleichzeitigen Bereitstellung von Funktionalität und Nutzbarkeit und darauf , Software-Entwicklung genießbar zu machen , ohne Ihre Sinne zu überlasten . Wir planen Anjuta weiterhin zu verbessern und stabiler zu machen , um Ihnen das bestmögliche Entwicklungserlebnis zu vermitteln . Wir hoffen , Sie haben haben eine gute Zeit mit Anjuta . Falls nicht , so helfen Sie uns bitte es besser zu machen , und melden Sie Fehler und Verbesserungsvorschläge .
Im folgenden Bildschirmfoto sehen Sie einiges von dem , was Ihnen in Anjuta begegnen werden .
Anjuta in Aktion
Anjuta hat ein flexibles und fortgeschrittenes Docking-System , das es Ihnen erlaubt alle Ansichten so anzuordnen , wie Sie es wollen . Sie können die Ansichten ziehen und ablegen , um das Layout neu anzuordnen . Die Layouts sind den Projekten zugeordnet , damit verschiedene Layouts für verschiedene Projekte gepflegt werden können . Alle Ansichten können minimiert werden , um die Übersicht zu verbessern . Minimierte Ansichten erscheinen als Symbole am linken Rand des Hauptfensters . Sie können alle Menüaktionen konfigurieren , indem Sie entweder tippen , während der Mauszeiger über einem Menüpunkt ist ( der übliche Weg unter GNOME ) , oder direkt durch einen Dialog zur Zuordnung der Tastenkombinationen .
Anjuta
Erste Schritte mit Anjuta
Menüs und Tastenkombinationen
Anjuta Datei
Menüleiste
Anjuta-Menüleiste
Menü » Datei «
Tastenkombinationen sind für viele Menüpunkte verfügbar . Alle Tastenkombinationen werden neben dem zugeordneten Menüpunkt angezeigt . Einige weitere hilfreiche Tastenkombinationen sind hier aufgeführt .
Tastenkürzel anpassen
Bearbeiten Einstellungen Tastenkombinationen
Hauptfenster
Das Hauptfenster enthält mehrere Ansichtsfenster , die sich durch Ziehen ihrer jeweiligen Titelleiste neu anordnen lassen . Sie können auch durch den Knopf links auf ihrer Titelleiste minimiert werden .
Sitzungsverwaltung
Anjuta Anjuta Anjuta
Dateioperationen
Anlegen einer neuen Datei und Einfügen von Text
Erzeugen einer neuen Datei
Datei speichern
Sie sollten neue Dokumente so bald wie möglich speichern , um Datenverluste in Folge von Abstürzen zu vermeiden .
Datei-Assistent
Erstellungsassistent für Dateien
Der » Datei öffnen«-Dialog
Datei Neu Datei OK
Einfügen von Makros
Das Makro-Plugin muss aktiviert sein .
Einfügen
Makro
Der Makro-Dialog
Definieren von Makros
Makro hinzufügen/ bearbeiten
Dialog zum Hinzufügen/ Bearbeiten
Makro-Schlüsselwörter
Schlüsselwort-Makro
Das Schlüsselwort-Makro

Öffnen und Speichern von Dateien
Dialog zum Öffnen von Dateien
Eine Datei öffnen : Datei Öffnen Öffnen Strg O Datei öffnen Öffnen Strg Öffnen Abbrechen
Dialog zum Öffnen mehrerer Dateien
Bearbeiten von Dateien
Anjuta
Syntaxhervorhebung
Einfalten des Codes
Automatische Formatierung von Quelltext
Suchen und Ersetzen von Text in Dateien
Suchen
Festlegen des Suchbereichs
Sie können die maximale Anzahl der auszuführenden Aktionen festlegen .
Sie können wählen , nach welchem Text gesucht werden soll .
Suchen in Dateien
Ersetzen
Sie können Suchoptionen auch speichern .
Drucken einer Datei
Druckvorschau für eine C-Datei
Druckvorschau
Druckeinstellungen
Druckeinstellungen
Druckdialog
Projektverwaltung
Erstellen eines neuen Projekts
Erstellen eines Projekts aus einer Vorlage
Importieren von Projekten
Laden und Speichern von Projekten
Laden von Projekten
Datei Öffnen *.anjuta OK
Speichern von Projekten
Das Projekt wird beim Schließen automatisch gespeichert , weil alle Änderungen direkt in der Projektstruktur vorgenommen werden .
Projektstruktur
Projektfenster
Das Projektfenster
Gruppen und Ziele
Hinzufügen von Gruppen
Entfernen von Gruppen

Hinzufügen von Zielen
Wählen Sie den Zieltyp .

Entfernen von Zielen

Hinzufügen und Entfernen von Dateien
Hinzufügen von Quelldateien
Entfernen von Quelldateien
Ein Bestätigungsdialog wird geöffnet , und die Datei wird aus dem Projekt entfernt .
Die Datei wurde nicht entfernt !
Die Datei wird nicht aus dem Dateisystem entfernt . Sie ist noch vorhanden , und Sie können Sie später wieder hinzufügen , falls gewünscht . Die Datei wird nur aus der Projektliste entfernt und wird für Projektoperationen wie Kompilieren , Erstellen oder Veröffentlichen von Distributionspaketen nicht mehr berücksichtigt .
Projekteinstellungen
$(prefix )
$(bindir )
$(libdir )
Infoseite zu automake
Projekteigenschaften
Eigenschaften-Dialog für Projekte
Gruppeneigenschaften
Eigenschaften-Dialog für Gruppen
Ziel-Eigenschaften
Eigenschaften-Dialog für Ziele
Erstellen
Kompilieren und Erstellen
Kompilieren einer Datei
Erstellen eines ausführbaren Programms
Weitere Operationen
Erstellen eines Distributionspakets
Installieren eines Projekts
Systemweite Installation
Debuggen ( Fehlerdiagnose )
Die Befehlszeilenparameter
Der Arbeitsordner
Umgebungsvariablen
Aktuelle Umgebungsvariablen werden hier in Hellgrau dargestellt . Sie können hier Umgebungsvariablen hinzufügen , ändern oder löschen .
Hinzufügen von Quellordnern
Ausführung
Ausführen/ Fortsetzen
Protokoll a_nsehe
Ort
Adresse
Typ
Bedingung
Status
Dateiname : Zeilennummer
Funktionsname
Datei : Funktionsname
Ausdrücke
Auflisten lokaler Variablen
Lokale Variablen
Stacktrace
Stack-Fenster
Thread
Thread-Fenster
CPU
Sonstige
Dynamisch geladene Bibliotheken
Kernelsignale
Kernelsignale-Fenster
Informationen über benutzte Dateien
Informationen über die Kernelstruktur
Informationen über globale Variablen
Informationen über die aktuellen Funktionsargumente
Benutzerbefehl
Glade Oberflächenentwicklung
Schnellstart
Allgemeine Fragen zur Benutzung von Glade
Widget-Name
Vorgegebenes Signal
Einstellungen
Automatisch Ressourcen hinzufügen
Vorlage für Handler
Allgemein
Dateimanager
Benutzerdefinierte Werkzeuge
Das Werkzeug-Plugin muss aktiviert sein , um diese Funktion nutzen zu können .
Werkzeug-Beispiele
Das ist ein einfaches Beispiel , wie man das Werkzeug-Plugin verwenden kann , um das Generierungsskript für GNOME-Änderungsprotokolle einzubauen .
Der Werkzeugeditor
Autoren
Anjuta dieser Seite
http:/ /anjuta.org Anjuta http:/ /www.sourceforge.net/ projects/ anjuta
anjuta-devel@list.sourceforge.net
Lizenz
GNU General Public License Free Software Foundation
GNU General Public License
GNU General Public License GNOME Benutzerhandbuchs GNU General Public License ihre Internetseite 51 Franklin Street , Fifth Floor Boston MA 02111-1301 USA
Mario Blättermann

Anjuta IDE-Handbuch
v1.0.0
Handbuch für die Anjuta-IDE
Naba
Kumar
Andy
Piper
Biswapesh
Chattopadhyayr
Johannes
Schmid
2001-2002
2006-2008
Naba Kumar , Andy Piper , Biswapesh Chattopadhyay
Johannes Schmid
Link
Bei vielen der von Firmen zur Unterscheidung ihrer Produkte und Dienstleistungen verwendeten Namen handelt es sich um Marken . An den Stellen , an denen derartige Namen in einer GNOME-Dokumentation vorkommen und wenn die Mitglieder des GNOME-Dokumentationsprojekts über diese Marken informiert wurden , sind die Namen in Großbuchstaben oder mit großen Anfangsbuchstaben geschrieben .
Anjuta-Handbuch 2.1.0
2007
jhs@gnome.org
Anjuta-Team
Einführung
Anjuta
Anjuta DevStudio wurde entwickelt , um einfach aber doch mächtig genug zu sein , um allen Bedürfnissen eines Programmierers nachzukommen . Wir haben Anjuta im Verlauf der Entwicklung viele neue Funktionen hinzugefügt . Unser Fokus liegt auf der gleichzeitigen Bereitstellung von Funktionalität und Nutzbarkeit und darauf , Software-Entwicklung genießbar zu machen , ohne Ihre Sinne zu überlasten . Wir planen Anjuta weiterhin zu verbessern und stabiler zu machen , um Ihnen das bestmögliche Entwicklungserlebnis zu vermitteln . Wir hoffen , Sie haben haben eine gute Zeit mit Anjuta . Falls nicht , so helfen Sie uns bitte es besser zu machen , und melden Sie Fehler und Verbesserungsvorschläge .
Im folgenden Bildschirmfoto sehen Sie einiges von dem , was Ihnen in Anjuta begegnen werden .
Anjuta in Aktion
Anjuta hat ein flexibles und fortgeschrittenes Docking-System , das es Ihnen erlaubt alle Ansichten so anzuordnen , wie Sie es wollen . Sie können die Ansichten ziehen und ablegen , um das Layout neu anzuordnen . Die Layouts sind den Projekten zugeordnet , damit verschiedene Layouts für verschiedene Projekte gepflegt werden können . Alle Ansichten können minimiert werden , um die Übersicht zu verbessern . Minimierte Ansichten erscheinen als Symbole am linken Rand des Hauptfensters . Sie können alle Menüaktionen konfigurieren , indem Sie entweder tippen , während der Mauszeiger über einem Menüpunkt ist ( der übliche Weg unter GNOME ) , oder direkt durch einen Dialog zur Zuordnung der Tastenkombinationen .
Anjuta
Erste Schritte mit Anjuta
Menüs und Tastenkombinationen
Anjuta Datei
Menüleiste
Anjuta-Menüleiste
Menü » Datei «
Tastenkombinationen sind für viele Menüpunkte verfügbar . Alle Tastenkombinationen werden neben dem zugeordneten Menüpunkt angezeigt . Einige weitere hilfreiche Tastenkombinationen sind hier aufgeführt .
Tastenkürzel anpassen
Bearbeiten Einstellungen Tastenkombinationen
Hauptfenster
Das Hauptfenster enthält mehrere Ansichtsfenster , die sich durch Ziehen ihrer jeweiligen Titelleiste neu anordnen lassen . Sie können auch durch den Knopf links auf ihrer Titelleiste minimiert werden .
Sitzungsverwaltung
Anjuta Anjuta Anjuta
Dateioperationen
Anlegen einer neuen Datei und Einfügen von Text
Erzeugen einer neuen Datei
Datei speichern
Sie sollten neue Dokumente so bald wie möglich speichern , um Datenverluste in Folge von Abstürzen zu vermeiden .
Datei-Assistent
Erstellungsassistent für Dateien
Der » Datei öffnen«-Dialog
Datei Neu Datei OK
Einfügen von Makros
Das Makro-Plugin muss aktiviert sein .
Einfügen
Makro
Der Makro-Dialog
Definieren von Makros
Makro hinzufügen/ bearbeiten
Dialog zum Hinzufügen/ Bearbeiten
Makro-Schlüsselwörter
Schlüsselwort-Makro
Das Schlüsselwort-Makro

Öffnen und Speichern von Dateien
Dialog zum Öffnen von Dateien
Eine Datei öffnen : Datei Öffnen Öffnen Strg O Datei öffnen Öffnen Strg Öffnen Abbrechen
Dialog zum Öffnen mehrerer Dateien
Bearbeiten von Dateien
Anjuta
Syntaxhervorhebung
Einfalten des Codes
Automatische Formatierung von Quelltext
Suchen und Ersetzen von Text in Dateien
Suchen
Festlegen des Suchbereichs
Sie können die maximale Anzahl der auszuführenden Aktionen festlegen .
Sie können wählen , nach welchem Text gesucht werden soll .
Suchen in Dateien
Ersetzen
Sie können Suchoptionen auch speichern .
Drucken einer Datei
Druckvorschau für eine C-Datei
Druckvorschau
Druckeinstellungen
Druckeinstellungen
Druckdialog
Projektverwaltung
Erstellen eines neuen Projekts
Erstellen eines Projekts aus einer Vorlage
Importieren von Projekten
Laden und Speichern von Projekten
Laden von Projekten
Datei Öffnen *.anjuta OK
Speichern von Projekten
Das Projekt wird beim Schließen automatisch gespeichert , weil alle Änderungen direkt in der Projektstruktur vorgenommen werden .
Projektstruktur
Projektfenster
Das Projektfenster
Gruppen und Ziele
Hinzufügen von Gruppen
Entfernen von Gruppen

Hinzufügen von Zielen
Wählen Sie den Zieltyp .

Entfernen von Zielen

Hinzufügen und Entfernen von Dateien
Hinzufügen von Quelldateien
Entfernen von Quelldateien
Ein Bestätigungsdialog wird geöffnet , und die Datei wird aus dem Projekt entfernt .
Die Datei wurde nicht entfernt !
Die Datei wird nicht aus dem Dateisystem entfernt . Sie ist noch vorhanden , und Sie können Sie später wieder hinzufügen , falls gewünscht . Die Datei wird nur aus der Projektliste entfernt und wird für Projektoperationen wie Kompilieren , Erstellen oder Veröffentlichen von Distributionspaketen nicht mehr berücksichtigt .
Projekteinstellungen
$(prefix )
$(bindir )
$(libdir )
Infoseite zu automake
Projekteigenschaften
Eigenschaften-Dialog für Projekte
Gruppeneigenschaften
Eigenschaften-Dialog für Gruppen
Ziel-Eigenschaften
Eigenschaften-Dialog für Ziele
Erstellen
Kompilieren und Erstellen
Kompilieren einer Datei
Erstellen eines ausführbaren Programms
Weitere Operationen
Erstellen eines Distributionspakets
Installieren eines Projekts
Systemweite Installation
Debuggen ( Fehlerdiagnose )
Die Befehlszeilenparameter
Der Arbeitsordner
Umgebungsvariablen
Aktuelle Umgebungsvariablen werden hier in Hellgrau dargestellt . Sie können hier Umgebungsvariablen hinzufügen , ändern oder löschen .
Hinzufügen von Quellordnern
Ausführung
Ausführen/ Fortsetzen
Protokoll a_nsehe
Ort
Adresse
Typ
Bedingung
Status
Dateiname : Zeilennummer
Funktionsname
Datei : Funktionsname
Ausdrücke
Auflisten lokaler Variablen
Lokale Variablen
Stacktrace
Stack-Fenster
Thread
Thread-Fenster
CPU
Sonstige
Dynamisch geladene Bibliotheken
Kernelsignale
Kernelsignale-Fenster
Informationen über benutzte Dateien
Informationen über die Kernelstruktur
Informationen über globale Variablen
Informationen über die aktuellen Funktionsargumente
Benutzerbefehl
Glade Oberflächenentwicklung
Schnellstart
Allgemeine Fragen zur Benutzung von Glade
Widget-Name
Vorgegebenes Signal
Einstellungen
Automatisch Ressourcen hinzufügen
Vorlage für Handler
Allgemein
Dateimanager
Benutzerdefinierte Werkzeuge
Das Werkzeug-Plugin muss aktiviert sein , um diese Funktion nutzen zu können .
Werkzeug-Beispiele
Das ist ein einfaches Beispiel , wie man das Werkzeug-Plugin verwenden kann , um das Generierungsskript für GNOME-Änderungsprotokolle einzubauen .
Der Werkzeugeditor
Autoren
Anjuta dieser Seite
http:/ /anjuta.org Anjuta http:/ /www.sourceforge.net/ projects/ anjuta
anjuta-devel@list.sourceforge.net
Lizenz
GNU General Public License Free Software Foundation
GNU General Public License
GNU General Public License GNOME Benutzerhandbuchs GNU General Public License ihre Internetseite 51 Franklin Street , Fifth Floor Boston MA 02111-1301 USA
Mario Blättermann
Johannes Schmid
Hinzufügen von Zielen
Ziel-Eigenschaften
Erstellen eines Distributionspakets
Projekteinstellungen
Druckeinstellungen
Druckeinstellungen
Anjuta-Team
Projektverwaltung
Erstellen eines ausführbaren Programms
Fehlerdiagnose
Glade Oberflächenentwicklung
Hinzufügen von Quelldateien
Anjuta in Aktion
Projekteinstellungen
Erstellen
Lokale Variablen
Lokale Variablen
Der Symbol-Browser
Erstellen eines neuen Projekts
Hinzufügen von Zielen
Hinzufügen von Zielen
Hinzufügen von Zielen
Importieren von Projekten
Importieren von Projekten
Mario Blättermann
Anjuta IDE-Handbuch
v1.0.0
Handbuch für die Anjuta-IDE
Naba
Kumar
Andy
Piper
Biswapesh
Chattopadhyayr
Johannes
Schmid
2001-2002
2006-2008
Naba Kumar , Andy Piper , Biswapesh Chattopadhyay
Link
Bei vielen der von Firmen zur Unterscheidung ihrer Produkte und Dienstleistungen verwendeten Namen handelt es sich um Marken . An den Stellen , an denen derartige Namen in einer GNOME-Dokumentation vorkommen und wenn die Mitglieder des GNOME-Dokumentationsprojekts über diese Marken informiert wurden , sind die Namen in Großbuchstaben oder mit großen Anfangsbuchstaben geschrieben .
Anjuta-Handbuch 2.1.0
2007
jhs@gnome.org
Einführung
Anjuta
Anjuta DevStudio wurde entwickelt , um einfach aber doch mächtig genug zu sein , um allen Bedürfnissen eines Programmierers nachzukommen . Wir haben Anjuta im Verlauf der Entwicklung viele neue Funktionen hinzugefügt . Unser Fokus liegt auf der gleichzeitigen Bereitstellung von Funktionalität und Nutzbarkeit und darauf , Software-Entwicklung genießbar zu machen , ohne Ihre Sinne zu überlasten . Wir planen Anjuta weiterhin zu verbessern und stabiler zu machen , um Ihnen das bestmögliche Entwicklungserlebnis zu vermitteln . Wir hoffen , Sie haben haben eine gute Zeit mit Anjuta . Falls nicht , so helfen Sie uns bitte es besser zu machen , und melden Sie Fehler und Verbesserungsvorschläge .
Im folgenden Bildschirmfoto sehen Sie einiges von dem , was Ihnen in Anjuta begegnen werden .
Anjuta hat ein flexibles und fortgeschrittenes Docking-System , das es Ihnen erlaubt alle Ansichten so anzuordnen , wie Sie es wollen . Sie können die Ansichten ziehen und ablegen , um das Layout neu anzuordnen . Die Layouts sind den Projekten zugeordnet , damit verschiedene Layouts für verschiedene Projekte gepflegt werden können . Alle Ansichten können minimiert werden , um die Übersicht zu verbessern . Minimierte Ansichten erscheinen als Symbole am linken Rand des Hauptfensters . Sie können alle Menüaktionen konfigurieren , indem Sie entweder tippen , während der Mauszeiger über einem Menüpunkt ist ( der übliche Weg unter GNOME ) , oder direkt durch einen Dialog zur Zuordnung der Tastenkombinationen .
Anjuta
Erste Schritte mit Anjuta
Menüs und Tastenkombinationen
Anjuta Datei
Menüleiste
Anjuta-Menüleiste
Menü » Datei «
Tastenkombinationen sind für viele Menüpunkte verfügbar . Alle Tastenkombinationen werden neben dem zugeordneten Menüpunkt angezeigt . Einige weitere hilfreiche Tastenkombinationen sind hier aufgeführt .
Editorseite wechseln : Strg Alt Bild Strg Alt Bild
Kontexthilfe : Umschalt F1 Devhelp Devhelp Devhelp
Automatische Vervollständigung : Strg Eingabetaste
Weitere Tastenkombinationen :
Tastenkürzel anpassen
Bearbeiten Einstellungen Tastenkombinationen
Hauptfenster
Das Hauptfenster enthält mehrere Ansichtsfenster , die sich durch Ziehen ihrer jeweiligen Titelleiste neu anordnen lassen . Sie können auch durch den Knopf links auf ihrer Titelleiste minimiert werden .
Dokumentenfenster
Projektfenster Projektfenster Projektfenster
Dateifenster
Symbolfenster ctags
Suchreiter
Nachrichtenfenster stdout stderr Nachrichtenfenster Anjuta
verknüpft
Wenn Sie zum Beispiel eine Datei kompilieren , die Fehler enthält , so werden rote Nachrichten die Probleme erläutern und auf die Fehlerstelle hinweisen . Ein Doppelklick auf eine solche Nachricht öffnet die Datei und hebt die Zeile mit dem Fehler hervor .
Terminalfenster
Sitzungsverwaltung
Anjuta Anjuta Anjuta
Dateioperationen
Anlegen einer neuen Datei und Einfügen von Text
Erstellen einer neuen Datei
Datei Neu Neue Datei Neue Datei 1 Neue Datei 2 Neue Datei 3
Datei speichern
Sie sollten neue Dokumente so bald wie möglich speichern , um Datenverluste in Folge von Abstürzen zu vermeiden .
Datei-Assistent
Erstellungsassistent für Dateien
Der » Datei öffnen«-Dialog
Datei Neu Datei OK
Anjuta Diff Protokoll ansehen
Einfügen von Makros
Makros
Das Makro-Plugin muss aktiviert sein .
Einfügen
Es gibt zwei Arten Makros : Anjuta-Makros und Benutzer-Makros ( sie werden als » Meine Makros « angezeigt ) . Anjuta-Makros können nicht verändert werden , aber Sie können Benutzer-Makros erstellen und bearbeiten .
Bearbeiten Makros Makros Einfügen
Makro
Der Makro-Dialog
Bearbeiten Makros Makro einfügen
Definieren von Makros
Hinzufügen Bearbeiten Makros Makro hinzufügen OK
Entfernen
Makro hinzufügen/ bearbeiten
Dialog zum Hinzufügen/ Bearbeiten
Bearbeiten
Makro-Schlüsselwörter
Makro-Schlüsselwörter stehen zur Verfügung . Sie können in Makro-Definitionen eingebunden werden . Makro-Schlüsselwörter beginnen und enden jeweils mit dem Zeichen » @ « .
Schlüsselwort-Makro
Das Schlüsselwort-Makro

Öffnen und Speichern von Dateien
Dialog zum Öffnen von Dateien
Eine Datei öffnen : Datei Öffnen Öffnen Strg O Datei öffnen Öffnen Strg Öffnen Abbrechen
Dialog zum Öffnen mehrerer Dateien
Der Dialog » Datei öffnen « im Modus für mehrere Dateien
Verborgene Dateien zeigen
Als Datei speichern
Speichern einer Datei : Datei Speichern Speichern Strg S Speichern unter Speichern
Automatisches Speichern einer Datei
Alle speichern Alle speichern
Eine Datei unter anderem Namen speichern : Datei Speichern unter Datei speichern unter Speichern
Datei beim Speichern überschreiben
Speichern unter Ja
Eine Datei schließen : Datei Schließen Schließen Anjuta
Bearbeiten von Dateien
Anjuta
Editorränder
Die Werkzeugleiste für Beschriftungen
Editorränder : Zeilennummernrand Markierungsrand Rand für Textfaltungen Anjuta Ansicht Editor
Rand für Zeilennummern Rand für Zeilennummern Ansicht Editor Rand für Zeilennummern
Markierungsrand Ansicht Editor Markierungsrand Gehe zu Lesezeichen Lesezeichen an/ aus
Textfaltungsrand Textfaltung
Verborgener Markierungsrand
Editorränder im Falle unsichtbarer Markierungsränder
Ansicht Editor Markierungsrand
Bearbeitungshilfen
Editor mit Bearbeitungshilfen
Syntaxhervorhebung
Anjuta Anjuta Ansicht Editor Hervorhebungsmodus
$prefix/ share/ anjuta/ properties/ anjuta.properties $prefix/ share/ anjuta/ properties/ styles.properties $home/ .config/ anjuta/ scintilla/ editor-style.properties
Textfaltung
Code-Faltungen Editor
Code-Faltung ist besonders nützlich beim Bearbeiten von sehr großen Quelldateien mit tausenden Zeilen . Sobald Teile eingeklappt sind , scheint ein Dokument kleiner zu sein , und einfaches Durchsuchen und Bearbeiten werden möglich .
Bitte beachten Sie , dass Code-Faltung und Bearbeitungshilfen nur im Scintilla-Editor verfügbar sind .
Automatische Formatierung von Quelltext
Bearbeiten Automatisches Einrücken
tags ? ? Symbol
Symbol-Browser
Anjuta
Tag-Abgleich
Anjuta
Suchen und Ersetzen von Text in Dateien
Suchen
Zeichenkette regulären Ausdruck Bearbeiten Suchen Finden Strg Alt F Finden
Suchen
Suchaktion Suchziel
Suchen Strg G Umschalt Strg G Suchausdruck
Dialog » Suchtext «
Stopp
Festlegen des Suchbereichs
Suchziel
Sie können die maximale Anzahl der auszuführenden Aktionen festlegen .
Dialog » Suchziel «
Sie können wählen , nach welchem Text gesucht werden soll .
Auswahlmöglichkeiten für » Suchen in «
Suchen in Dateien
Suchen in
Suchausdruck Groß-/ Kleinschreibung berücksichtigen Nur vollständige Wörter berücksichtigen Suchen
Suchen in Suchen
Dateisuchmuster
Einen Suchvorgang angeben
Sie können auswählen welche Aktion bei erfolgreicher Suche ausgeführt werden soll .
Suche in Suchrichtung
Auswahlmöglichkeiten für die Aktion » Suchziel «
Ersetzen
Ersetzen durch
Ersetzen Weiter
Sucheinstellungen
Sie können Suchoptionen auch speichern .
Das in rot hervorgehobene Objekt ist das aktive . Das vorausgewählte Objekt gibt Sucheinstellungen vor , die beim Start von Anjuta geladen werden .
Dialog zu den Sucheinstellungen
Drucken einer Datei
Druckvorschau für eine C-Datei
Druckvorschau
Datei Druckvorschau Drucken
Druckeinstellungen
Datei Drucken Drucken Drucken
Sie können auch Hoch- oder Querformat , Papiergröße , Seitenorientierung und Papiertyp festlegen . Vergessen Sie nicht die richtigen Einstellungen für Ihren Drucker zu treffen , da andernfalls der Ausdruck nicht wie erwartet sein kann .
Druckdialog
automake/ autoconf
Das vorteilhafte ist , dass Anjuta nichts zusätzlich zu den in der Projektstruktur hinterlegten Projektinformationen speichert . Das heißt , es gibt keine separaten Projektdaten von Anjuta , und alle Projektarbeiten geschehen direkt in der Projektstruktur . So ist es möglich , das Projekt ohne Anjuta zu verwalten und zu entwickeln , ohne den Zwang , zu einem Anjuta-eigenen Format umwandeln zu müssen . Technisch betrachtet sind Anjuta-Projekte automake-Projekte , und so ist gemischte Entwicklung ( mit und ohne Anjuta-Anwender ) als auch der Wechsel zwischen Entwicklungsplattformen ohne Hindernisse möglich .
Erstellen eines Projekts aus einer Vorlage
Datei Neu Projekt Vor
Vor
Beenden
Sobald das Projekt erstellt wurde , können Sie es testen und es erstellen oder ausführen .
autoconf/ automake
Laden und Speichern von Projekten
Laden von Projekten
Datei Öffnen *.anjuta OK
Datei Zuletzt geöffnet
Speichern von Projekten
Das Projekt wird beim Schließen automatisch gespeichert , weil alle Änderungen direkt in der Projektstruktur vorgenommen werden .
Projektstruktur
Projektfenster
Das Projektfenster
Gruppen und Ziele
Hinzufügen von Gruppen
Projekt Gruppe hinzufügen
Wählen Sie die Gruppe , innerhalb der die neue Gruppe hinzugefügt werden soll .
Hinzufügen

In Automake-Projekten wird ein neuer Ordner mit dem angegebenen Namen im Ordner der übergeordneten Gruppe erstellt .
Entfernen von Gruppen
Projektverwaltung
Entfernen

Wählen Sie den Zieltyp .

Entfernen von Zielen

Hinzufügen und Entfernen von Dateien
Entfernen von Quelldateien
Ein Bestätigungsdialog wird geöffnet , und die Datei wird aus dem Projekt entfernt .
Die Datei wurde nicht entfernt !
Die Datei wird nicht aus dem Dateisystem entfernt . Sie ist noch vorhanden , und Sie können Sie später wieder hinzufügen , falls gewünscht . Die Datei wird nur aus der Projektliste entfernt und wird für Projektoperationen wie Kompilieren , Erstellen oder Veröffentlichen von Distributionspaketen nicht mehr berücksichtigt .
$(prefix )
$(bindir )
$(libdir )
Infoseite zu automake
Projekteigenschaften
Eigenschaften-Dialog für Projekte
Gruppeneigenschaften
Eigenschaften-Dialog für Gruppen
Eigenschaften-Dialog für Ziele
Kompilieren und Erstellen
Kompilieren einer Datei
Weitere Operationen
Installieren eines Projekts
Systemweite Installation
Die Befehlszeilenparameter
Der Arbeitsordner
Umgebungsvariablen
Aktuelle Umgebungsvariablen werden hier in Hellgrau dargestellt . Sie können hier Umgebungsvariablen hinzufügen , ändern oder löschen .
Hinzufügen von Quellordnern
Ausführung
Ausführen/ Fortsetzen
Protokoll a_nsehe
Ort
Adresse
Typ
Bedingung
Status
Dateiname : Zeilennummer
Funktionsname
Datei : Funktionsname
Ausdrücke
Auflisten lokaler Variablen
Stacktrace
Stack-Fenster
Thread
Thread-Fenster
CPU
Sonstige
Dynamisch geladene Bibliotheken
Kernelsignale
Kernelsignale-Fenster
Informationen über benutzte Dateien
Informationen über die Kernelstruktur
Informationen über globale Variablen
Informationen über die aktuellen Funktionsargumente
Benutzerbefehl
Schnellstart
Allgemeine Fragen zur Benutzung von Glade
Widget-Name
Vorgegebenes Signal
Einstellungen
Automatisch Ressourcen hinzufügen
Vorlage für Handler
Allgemein
Dateimanager
Benutzerdefinierte Werkzeuge
Das Werkzeug-Plugin muss aktiviert sein , um diese Funktion nutzen zu können .
Werkzeug-Beispiele
Das ist ein einfaches Beispiel , wie man das Werkzeug-Plugin verwenden kann , um das Generierungsskript für GNOME-Änderungsprotokolle einzubauen .
Der Werkzeugeditor
Autoren
Anjuta dieser Seite
http:/ /anjuta.org Anjuta http:/ /www.sourceforge.net/ projects/ anjuta
anjuta-devel-list@gnome.org
Lizenz
GNU General Public License Free Software Foundation
GNU General Public License
GNU General Public License GNOME Benutzerhandbuchs GNU General Public License ihre Internetseite 51 Franklin Street , Fifth Floor Boston MA 02111-1301 USA

Johannes Schmid
Hinzufügen von Zielen
Ziel-Eigenschaften
Erstellen eines Distributionspakets
Projekteinstellungen
Druckeinstellungen
Druckeinstellungen
Anjuta-Team
Projektverwaltung
Erstellen eines ausführbaren Programms
Fehlerdiagnose
Glade Oberflächenentwicklung
Hinzufügen von Quelldateien
Anjuta in Aktion
Projekteinstellungen
Erstellen
Lokale Variablen
Lokale Variablen
Der Symbol-Browser
Erstellen eines neuen Projekts
Hinzufügen von Zielen
Hinzufügen von Zielen
Hinzufügen von Zielen
Importieren von Projekten
Importieren von Projekten
Mario Blättermann
Anjuta IDE-Handbuch
v1.0.0
Handbuch für die Anjuta-IDE
Naba
Kumar
Andy
Piper
Biswapesh
Chattopadhyayr
Johannes
Schmid
2001-2002
2006-2008
Naba Kumar , Andy Piper , Biswapesh Chattopadhyay
Link
Bei vielen der von Firmen zur Unterscheidung ihrer Produkte und Dienstleistungen verwendeten Namen handelt es sich um Marken . An den Stellen , an denen derartige Namen in einer GNOME-Dokumentation vorkommen und wenn die Mitglieder des GNOME-Dokumentationsprojekts über diese Marken informiert wurden , sind die Namen in Großbuchstaben oder mit großen Anfangsbuchstaben geschrieben .
Anjuta-Handbuch 2.1.0
2007
jhs@gnome.org
Einführung
Anjuta
Anjuta DevStudio wurde entwickelt , um einfach aber doch mächtig genug zu sein , um allen Bedürfnissen eines Programmierers nachzukommen . Wir haben Anjuta im Verlauf der Entwicklung viele neue Funktionen hinzugefügt . Unser Fokus liegt auf der gleichzeitigen Bereitstellung von Funktionalität und Nutzbarkeit und darauf , Software-Entwicklung genießbar zu machen , ohne Ihre Sinne zu überlasten . Wir planen Anjuta weiterhin zu verbessern und stabiler zu machen , um Ihnen das bestmögliche Entwicklungserlebnis zu vermitteln . Wir hoffen , Sie haben haben eine gute Zeit mit Anjuta . Falls nicht , so helfen Sie uns bitte es besser zu machen , und melden Sie Fehler und Verbesserungsvorschläge .
Im folgenden Bildschirmfoto sehen Sie einiges von dem , was Ihnen in Anjuta begegnen werden .
Anjuta hat ein flexibles und fortgeschrittenes Docking-System , das es Ihnen erlaubt alle Ansichten so anzuordnen , wie Sie es wollen . Sie können die Ansichten ziehen und ablegen , um das Layout neu anzuordnen . Die Layouts sind den Projekten zugeordnet , damit verschiedene Layouts für verschiedene Projekte gepflegt werden können . Alle Ansichten können minimiert werden , um die Übersicht zu verbessern . Minimierte Ansichten erscheinen als Symbole am linken Rand des Hauptfensters . Sie können alle Menüaktionen konfigurieren , indem Sie entweder tippen , während der Mauszeiger über einem Menüpunkt ist ( der übliche Weg unter GNOME ) , oder direkt durch einen Dialog zur Zuordnung der Tastenkombinationen .
Anjuta
Erste Schritte mit Anjuta
Menüs und Tastenkombinationen
Anjuta Datei
Menüleiste
Anjuta-Menüleiste
Menü » Datei «
Tastenkombinationen sind für viele Menüpunkte verfügbar . Alle Tastenkombinationen werden neben dem zugeordneten Menüpunkt angezeigt . Einige weitere hilfreiche Tastenkombinationen sind hier aufgeführt .
Editorseite wechseln : Strg Alt Bild Strg Alt Bild
Kontexthilfe : Umschalt F1 Devhelp Devhelp Devhelp
Automatische Vervollständigung : Strg Eingabetaste
Weitere Tastenkombinationen :
Tastenkürzel anpassen
Bearbeiten Einstellungen Tastenkombinationen
Hauptfenster
Das Hauptfenster enthält mehrere Ansichtsfenster , die sich durch Ziehen ihrer jeweiligen Titelleiste neu anordnen lassen . Sie können auch durch den Knopf links auf ihrer Titelleiste minimiert werden .
Dokumentenfenster
Projektfenster Projektfenster Projektfenster
Dateifenster
Symbolfenster ctags
Suchreiter
Nachrichtenfenster stdout stderr Nachrichtenfenster Anjuta
verknüpft
Wenn Sie zum Beispiel eine Datei kompilieren , die Fehler enthält , so werden rote Nachrichten die Probleme erläutern und auf die Fehlerstelle hinweisen . Ein Doppelklick auf eine solche Nachricht öffnet die Datei und hebt die Zeile mit dem Fehler hervor .
Terminalfenster
Sitzungsverwaltung
Anjuta Anjuta Anjuta
Dateioperationen
Anlegen einer neuen Datei und Einfügen von Text
Erstellen einer neuen Datei
Datei Neu Neue Datei Neue Datei 1 Neue Datei 2 Neue Datei 3
Datei speichern
Sie sollten neue Dokumente so bald wie möglich speichern , um Datenverluste in Folge von Abstürzen zu vermeiden .
Datei-Assistent
Erstellungsassistent für Dateien
Der » Datei öffnen«-Dialog
Datei Neu Datei OK
Anjuta Diff Protokoll ansehen
Einfügen von Makros
Makros
Das Makro-Plugin muss aktiviert sein .
Einfügen
Es gibt zwei Arten Makros : Anjuta-Makros und Benutzer-Makros ( sie werden als » Meine Makros « angezeigt ) . Anjuta-Makros können nicht verändert werden , aber Sie können Benutzer-Makros erstellen und bearbeiten .
Bearbeiten Makros Makros Einfügen
Makro
Der Makro-Dialog
Bearbeiten Makros Makro einfügen
Definieren von Makros
Hinzufügen Bearbeiten Makros Makro hinzufügen OK
Entfernen
Makro hinzufügen/ bearbeiten
Dialog zum Hinzufügen/ Bearbeiten
Bearbeiten
Makro-Schlüsselwörter
Makro-Schlüsselwörter stehen zur Verfügung . Sie können in Makro-Definitionen eingebunden werden . Makro-Schlüsselwörter beginnen und enden jeweils mit dem Zeichen » @ « .
Schlüsselwort-Makro
Das Schlüsselwort-Makro

Öffnen und Speichern von Dateien
Dialog zum Öffnen von Dateien
Eine Datei öffnen : Datei Öffnen Öffnen Strg O Datei öffnen Öffnen Strg Öffnen Abbrechen
Dialog zum Öffnen mehrerer Dateien
Der Dialog » Datei öffnen « im Modus für mehrere Dateien
Verborgene Dateien zeigen
Als Datei speichern
Speichern einer Datei : Datei Speichern Speichern Strg S Speichern unter Speichern
Automatisches Speichern einer Datei
Alle speichern Alle speichern
Eine Datei unter anderem Namen speichern : Datei Speichern unter Datei speichern unter Speichern
Datei beim Speichern überschreiben
Speichern unter Ja
Eine Datei schließen : Datei Schließen Schließen Anjuta
Bearbeiten von Dateien
Anjuta
Editorränder
Die Werkzeugleiste für Beschriftungen
Editorränder : Zeilennummernrand Markierungsrand Rand für Textfaltungen Anjuta Ansicht Editor
Rand für Zeilennummern Rand für Zeilennummern Ansicht Editor Rand für Zeilennummern
Markierungsrand Ansicht Editor Markierungsrand Gehe zu Lesezeichen Lesezeichen an/ aus
Textfaltungsrand Textfaltung
Verborgener Markierungsrand
Editorränder im Falle unsichtbarer Markierungsränder
Ansicht Editor Markierungsrand
Bearbeitungshilfen
Editor mit Bearbeitungshilfen
Syntaxhervorhebung
Anjuta Anjuta Ansicht Editor Hervorhebungsmodus
$prefix/ share/ anjuta/ properties/ anjuta.properties $prefix/ share/ anjuta/ properties/ styles.properties $home/ .config/ anjuta/ scintilla/ editor-style.properties
Textfaltung
Code-Faltungen Editor
Code-Faltung ist besonders nützlich beim Bearbeiten von sehr großen Quelldateien mit tausenden Zeilen . Sobald Teile eingeklappt sind , scheint ein Dokument kleiner zu sein , und einfaches Durchsuchen und Bearbeiten werden möglich .
Bitte beachten Sie , dass Code-Faltung und Bearbeitungshilfen nur im Scintilla-Editor verfügbar sind .
Automatische Formatierung von Quelltext
Bearbeiten Automatisches Einrücken
tags ? ? Symbol
Symbol-Browser
Anjuta
Tag-Abgleich
Anjuta
Suchen und Ersetzen von Text in Dateien
Suchen
Zeichenkette regulären Ausdruck Bearbeiten Suchen Finden Strg Alt F Finden
Suchen
Suchaktion Suchziel
Suchen Strg G Umschalt Strg G Suchausdruck
Dialog » Suchtext «
Stopp
Festlegen des Suchbereichs
Suchziel
Sie können die maximale Anzahl der auszuführenden Aktionen festlegen .
Dialog » Suchziel «
Sie können wählen , nach welchem Text gesucht werden soll .
Auswahlmöglichkeiten für » Suchen in «
Suchen in Dateien
Suchen in
Suchausdruck Groß-/ Kleinschreibung berücksichtigen Nur vollständige Wörter berücksichtigen Suchen
Suchen in Suchen
Dateisuchmuster
Einen Suchvorgang angeben
Sie können auswählen welche Aktion bei erfolgreicher Suche ausgeführt werden soll .
Suche in Suchrichtung
Auswahlmöglichkeiten für die Aktion » Suchziel «
Ersetzen
Ersetzen durch
Ersetzen Weiter
Sucheinstellungen
Sie können Suchoptionen auch speichern .
Das in rot hervorgehobene Objekt ist das aktive . Das vorausgewählte Objekt gibt Sucheinstellungen vor , die beim Start von Anjuta geladen werden .
Dialog zu den Sucheinstellungen
Drucken einer Datei
Druckvorschau für eine C-Datei
Druckvorschau
Datei Druckvorschau Drucken
Druckeinstellungen
Datei Drucken Drucken Drucken
Sie können auch Hoch- oder Querformat , Papiergröße , Seitenorientierung und Papiertyp festlegen . Vergessen Sie nicht die richtigen Einstellungen für Ihren Drucker zu treffen , da andernfalls der Ausdruck nicht wie erwartet sein kann .
Druckdialog
automake/ autoconf
Das vorteilhafte ist , dass Anjuta nichts zusätzlich zu den in der Projektstruktur hinterlegten Projektinformationen speichert . Das heißt , es gibt keine separaten Projektdaten von Anjuta , und alle Projektarbeiten geschehen direkt in der Projektstruktur . So ist es möglich , das Projekt ohne Anjuta zu verwalten und zu entwickeln , ohne den Zwang , zu einem Anjuta-eigenen Format umwandeln zu müssen . Technisch betrachtet sind Anjuta-Projekte automake-Projekte , und so ist gemischte Entwicklung ( mit und ohne Anjuta-Anwender ) als auch der Wechsel zwischen Entwicklungsplattformen ohne Hindernisse möglich .
Erstellen eines Projekts aus einer Vorlage
Datei Neu Projekt Vor
Vor
Beenden
Sobald das Projekt erstellt wurde , können Sie es testen und es erstellen oder ausführen .
autoconf/ automake
Laden und Speichern von Projekten
Laden von Projekten
Datei Öffnen *.anjuta OK
Datei Zuletzt geöffnet
Speichern von Projekten
Das Projekt wird beim Schließen automatisch gespeichert , weil alle Änderungen direkt in der Projektstruktur vorgenommen werden .
Projektstruktur
Projektfenster
Das Projektfenster
Gruppen und Ziele
Hinzufügen von Gruppen
Projekt Gruppe hinzufügen
Wählen Sie die Gruppe , innerhalb der die neue Gruppe hinzugefügt werden soll .
Hinzufügen

In Automake-Projekten wird ein neuer Ordner mit dem angegebenen Namen im Ordner der übergeordneten Gruppe erstellt .
Entfernen von Gruppen
Projektverwaltung
Entfernen

Wählen Sie den Zieltyp .

Entfernen von Zielen

Hinzufügen und Entfernen von Dateien
Entfernen von Quelldateien
Ein Bestätigungsdialog wird geöffnet , und die Datei wird aus dem Projekt entfernt .
Die Datei wurde nicht entfernt !
Die Datei wird nicht aus dem Dateisystem entfernt . Sie ist noch vorhanden , und Sie können Sie später wieder hinzufügen , falls gewünscht . Die Datei wird nur aus der Projektliste entfernt und wird für Projektoperationen wie Kompilieren , Erstellen oder Veröffentlichen von Distributionspaketen nicht mehr berücksichtigt .
$(prefix )
$(bindir )
$(libdir )
Infoseite zu automake
Projekteigenschaften
Eigenschaften-Dialog für Projekte
Gruppeneigenschaften
Eigenschaften-Dialog für Gruppen
Eigenschaften-Dialog für Ziele
Kompilieren und Erstellen
Kompilieren einer Datei
Weitere Operationen
Installieren eines Projekts
Systemweite Installation
Die Befehlszeilenparameter
Der Arbeitsordner
Umgebungsvariablen
Aktuelle Umgebungsvariablen werden hier in Hellgrau dargestellt . Sie können hier Umgebungsvariablen hinzufügen , ändern oder löschen .
Hinzufügen von Quellordnern
Ausführung
Ausführen/ Fortsetzen
Protokoll a_nsehe
Ort
Adresse
Typ
Bedingung
Status
Dateiname : Zeilennummer
Funktionsname
Datei : Funktionsname
Ausdrücke
Auflisten lokaler Variablen
Stacktrace
Stack-Fenster
Thread
Thread-Fenster
CPU
Sonstige
Dynamisch geladene Bibliotheken
Kernelsignale
Kernelsignale-Fenster
Informationen über benutzte Dateien
Informationen über die Kernelstruktur
Informationen über globale Variablen
Informationen über die aktuellen Funktionsargumente
Benutzerbefehl
Schnellstart
Allgemeine Fragen zur Benutzung von Glade
Widget-Name
Vorgegebenes Signal
Einstellungen
Automatisch Ressourcen hinzufügen
Vorlage für Handler
Allgemein
Dateimanager
Benutzerdefinierte Werkzeuge
Das Werkzeug-Plugin muss aktiviert sein , um diese Funktion nutzen zu können .
Werkzeug-Beispiele
Das ist ein einfaches Beispiel , wie man das Werkzeug-Plugin verwenden kann , um das Generierungsskript für GNOME-Änderungsprotokolle einzubauen .
Der Werkzeugeditor
Autoren
Anjuta dieser Seite
http:/ /anjuta.org Anjuta http:/ /www.sourceforge.net/ projects/ anjuta
anjuta-devel-list@gnome.org
Lizenz
GNU General Public License Free Software Foundation
GNU General Public License
GNU General Public License GNOME Benutzerhandbuchs GNU General Public License ihre Internetseite 51 Franklin Street , Fifth Floor Boston MA 02111-1301 USA
Mario Blättermann
original
Hilfe zu Anjuta DevStudio.link
Anjutatext
Anjuta Entwicklungsstudio
Johannes Schmid
Anjuta-Logo
Projektverwaltung
Coding und Navigieren durch den Code
Projekt erstellen
Fehlerdiagnoseprogramm
Referenz
Die Funktionsmerkmale des integrierten Editors einrichten und verwenden
Automatisches Vervollständigen und Calltips
Automatisches Vervollständigen
Eingabetaste Bearbeiten Automatische Vervollständigung
pkg-config
Außerdem könnte die Syntax für den eingebauten Parser zu komplex sein , so dass nicht erkannt werden kann , welche Vervollständigung benötigt wird
Effektives Coding mit Hilfe von Calltips
Es ist normalerweise schwierig , die Signatur jeder Methode oder Funktion eines Projekts auswendig zu wissen . Der Editor zeigt automaitsch ein kleine Mini-Hilfe mit der Signatur an , wenn Sie » ( « nach einem Funktionsnamen eingeben .
So finden Sie schnell gesuchte Informationen in der API-Dokumentation
Verwendung der API-Referenz
Durchsuchen der API-Referenz
Bearbeiten Einstellungen Allgemein Plugins DevHelp
Die API-Referenz besteht aus zwei Fenstern , einem für die Suche nach einem bestimmten Symbol und dem Browser für die Anzeige der Hilfedokumente .
Mit Tastenkürzeln im Editor zur API-Referenz springen
Umschalt F1 Hilfe Kontext-Hilfe
Automatische Einzüge für einen konsistenten Code-Stil einrichten und verwenden
Auto-Einrücken
Konfigurieren und Verwenden der automatischen Einrückung
Manuelle Konfiguration
Bearbeiten Einstellungen
Ein großer Nachteil der manuellen Einrichtung der Einrückungen besteht in der Notwendigkeit , dass alle an einem Projekt beteiligten Entwickler die gleichen Einstellungen verwenden müssen , anderenfalls werden in einer Datei mehrere Einrückungsstile auftauchen . Eine bessere Lösung finden Sie im nächsten Abschnitt .
Nur wenn Sie die Einrückung explizit in den Einstellungen geändert haben , werden diese angewendet , ansonsten ist die Modeline einer Datei maßgebend . So sorgt die Modeline dafür , die Datei konsistent zu halten .
Modelines
Modelines werden verwendet , um Editoren die automatische Ermittlung der Einrückung in einer bestimmten Datei zu ermöglichen . Sie sind insbesondere dann nützlich , wenn viele Entwickler in unterschiedlichen Umgebungen an einem Projekt arbeiten .
Vim Emacs
Codeblöcke einrücken
Bearbeiten Automatische Einrückung
Effiziente Möglichkeiten zum Navigieren durch den Quellcode
Navigieren durch den Code mit dem Symbolbrowser
Verwendung des Symbolbrowsers
Der Symbolbrowser gibt Ihnen eine Übersicht über die in Ihrem Projekt verwendeten Symbole . Symbole beziehen sich hier auf Variablen , Funktionen/ Methoden und Klassen . Die exakte Definitionen hängt von der verwendeten Programmiersprache ab .
Der Symbolbrowser verfügt über drei Reiter :
Datei
Projekt
Suchen Strg L
Ein Doppelklick auf ein Symbol führt Sie direkt zur Definition des Symbols im Editor .
Navigieren im Editor
Gehe zu
Symboldefinition
Symboldeklaration
Gehe zu Previous history Next history
Autotools-basiertes Projekt-Backend .
Sébastien Granjoux
Philip Chimento
Plugin für GNU Autotools-basiertes Projekt
configure make make install
Anjuta configure.ac Makefile.am
Fehlerbericht
Autotools Ordner-Eigenschaften bearbeiten .
Einen Autotools-Ordner bearbeiten
Diese Eigenschaft ermöglicht Ihnen gemeinsame Eigenschaften für alle Ziele festzulegen , die zu diesem Ordner gehören .
C Compiler-Flags
Flags , die dem C-Compiler übergeben werden sollen , wenn ein Wert pro Ziel nicht definiert ist .
Flags für C-Präprozessor
Diese Flags werden jedem Übersetzungsvorgang übergeben , der den C-Präprozessor aufruft . Dieser Wert wird ignoriert , wenn diese Flags für das Ziel definiert sind .
C++ Compiler-Flags
Flags , die dem C++-Compiler übergeben werden sollen , wenn ein Wert pro Ziel nicht definiert ist .
Flags für Fortran-Compiler
Flags , die dem Fortran 9x-Compiler übergeben werden sollen , wenn ein Wert pro Ziel nicht definiert ist .
Installationsordner
Hier werden Installationsordner festgelegt . Es wird gebraucht , wenn Sie Dateien in eigene Ordner installieren wollen .
Java Compiler-Flags
Flags , die dem Java-Compiler übergeben werden sollen , wenn ein Wert pro Ziel nicht definiert ist .
Flags für Lex/ Flex
Flags , die dem Scanner-Generator Lex oder Flex übergeben werden sollen , wenn ein Wert pro Ziel nicht definiert ist .
Flags für Linker
Flags , die dem Linker übergeben werden sollen , wenn ein Wert pro Ziel nicht definiert ist .
Flags für Objective C-Compiler
Flags , die dem Objective C-Compiler übergeben werden sollen , wenn ein Wert pro Ziel nicht definiert ist .
Vala Compiler-Flags
Flags , die dem Vala-Compiler übergeben werden sollen , wenn ein Wert pro Ziel nicht definiert ist .
Flags für Yacc/ Bison
Flags , die dem Parser-Generator Bison oder Yacc übergeben werden sollen , wenn ein Wert pro Ziel nicht definiert ist .
Autotools Projekt-Eigenschaften bearbeiten .
Autotools Projekt-Eigenschaften bearbeiten .
Dies sind die Eigenschaften des Hauptobjekts .
Backend
Dies ist das Backend , das vom Projekt verwendet wird : Autotools . Ein anderes Backend kann mit Klick auf diesen Knopf gewählt werden . Es kann nützlich sein , falls das aktuelle Backend Schwierigkeiten hat Ihre Projektdateien zu verarbeiten .
Name
Der Name Ihres Projekts , der auch Leerzeichen enthalten darf .
Version
Dies ist die Projektversion .
Adresse für Fehlerbericht
Dies ist eine Adresse , die es ermöglicht , Fehlerberichte zu senden , zum Beispiel eine E-Mail-Adresse oder ein Verweis auf eine Fehlerdatenbank . Es ist optional .
Paketname
Dies ist der Name des Distributionspakets . Es sollte keine Leerzeichen enthalten . Er ist optional .
Adresse
Dies ist die Homepage des Projekts . Sie ist optional .

Autotools Ziel-Eigenschaften bearbeiten
Ein Autotools-Ziel bearbeiten
Hier ist eine Liste aller Zieleigenschaften , die in Autotools-Projekten verwendet werden . Einige sind nicht für alle Ziele verfügbar .
Nur zum Test erstellen
Wenn ausgewählt wird dieses Ziel nicht installiert und muss nur beim Ausführen von Tests erstellt werden .
Die Flags , die dem C-Compiler beim Übersetzen von Ziel-Quelldateien übergeben werden . Dieser Wert überschreibt gegebenenfalls denjenigen aus dem übergeordneten Ordner .
Diese Flags werden jeder Übersetzung übergeben , die den C-Präprozessor aufruft . Dieser Wert überschreibt gegebenenfalls denjenigen aus dem übergeordneten Ordner .
Die Flags , die dem C++-Compiler beim Übersetzen von Ziel-Quelldateien übergeben werden . Dieser Wert überschreibt gegebenenfalls denjenigen aus dem übergeordneten Ordner .
Nicht installieren
Wenn ausgewählt wird dieses Ziel nicht installiert . Es kann für Werkzeuge verwendet werden , um andere Ziele oder Programme zu erstellen , welche nur von Entwicklern verwendet werden .
Präfix nicht verwenden
Wenn ausgewählt wird kein Präfix zu Handbuchseiten und ausführbare Datei hinzugefügt . Solche Präfixe werden als Alternativen zu Systemwerkzeugen eingesetzt .
Die Flags , die dem Fortran 9x-Compiler beim Übersetzen von Ziel-Quelldateien übergeben werden . Dieser Wert überschreibt gegebenenfalls denjenigen aus dem übergeordneten Ordner .
In Distribution einschließen
Wenn ausgewählt , so wird das Ziel im Distributionspaket enthalten sein .
Installationsordner
Legt fest , wo das Ziel installiert wird . Es ist nicht direkt der Ordner , in dem die Dateien installiert sind , sondern der Name eine der Standardvariable des Ordners ( bindir , sbindir , libdir , libexecdir , datadir , pkgdatadir , pkglibexecdir , includedir , mandir , infodir , docdir ) oder eine eigens definierte Variable in den Ordnereigenschaften .
Die Flags , die dem Java-Compiler beim Übersetzen von Ziel-Quelldateien übergeben werden . Dieser Wert überschreibt gegebenenfalls denjenigen aus dem übergeordneten Ordner .
Zielpfad beibehalten
Wenn ausgewählt wird die Hierarchie des Projektordners bei Dateiinstallation beibehalten .
Die Flags zur Weitergabe an die Scanner-Generatoren Lex oder Flex beim Erstellen von Ziel-Quelldateien . Dieser Wert überschreibt den wahrscheinlich im Elternordner definierten .
Bibliotheken
Nicht-paketierte Bibliotheken hinzufügen
Die Flags , die dem Linker beim Binden von Zielen übergeben werden . Dieser Wert überschreibt gegebenenfalls denjenigen aus dem übergeordneten Ordner .
Abschnitt im Handbuch
Geben Sie den Abschnitt des Handbuchs an , wo die Hilfeseite hinzugefügt werden soll . Gültige Abschnittsnamen enthalten die Ziffern 0 bis 9 sowie die Buchstaben » l « und » n « .
Die Flags , die dem Objective C-Compiler beim Übersetzen von Ziel-Quelldateien übergeben werden . Dieser Wert überschreibt gegebenenfalls denjenigen aus dem übergeordneten Ordner .
Die Flags , die dem Vala-Compiler beim Übersetzen von Ziel-Quelldateien übergeben werden . Dieser Wert überschreibt gegebenenfalls denjenigen aus dem übergeordneten Ordner .
Die Flags , die dem Parser-Ersteller Bison oder Yacc beim Erzeugen von Ziel-Quelldateien übergeben werden . Dieser Wert überschreibt gegebenenfalls denjenigen aus dem übergeordneten Ordner .
Zieltyp der Autotools .
Projekttyp der Autotools
Es stehen verschiedene Typen von Zielen zur Verfügung .
Gemeinsam verwendete Bibliothek ( libtool )
Es repräsentiert eine von mehreren Programmen gemeinsam verwendete Bibliothek , die zur Laufzeit gebunden wird . Dies ist die üblichste Variante einer Bibliothek unter Linux . Sie wird unter Windows » dynamic link library « ( DLL ) genannt .
Es verwendet das Libtool-Paket . Dessen Name muss mit » lib « beginnen und besitzt die Erweiterung » .la « .
Modul ( Libtool )
Repräsentiert eine Bibliothek , oft auch Plugin genannt , die zur Laufzeit explizit vom Programm selbst gebunden wird . Wird verwendet , um nur den Code zu laden , der zu den verwendeten Funktionen gehört .
Es verwendet das Libtool-Paket . Dessen Name ist nicht auf das Präfix » lib « angewiesen , muss aber die Erweiterung » .la « besitzen .
Statische Bibliothek ( Libtool )
Repräsentiert eine Bibliothek , die zur Übersetzungszeit mit dem Programm gebunden wird . Nur die verwendeten Funktionen sind in der erstellten ausführbaren Datei enthalten .
Es verwendet das Libtool-Paket . Dessen Name muss mit » lib « beginnen und besitzt die Erweiterung » .a « .
Programm
Repräsentiert ein übersetztes Programm , z.B. aus C-Quelldateien . Alle Unterelemente stellen die Quelldateien dar , die zu dem Programm übersetzt wurden .
Python-Modul
Es repräsentiert ein in Python geschriebenes Programm .
Java-Modul
Es repräsentiert ein in Java geschriebenes Programm .
LISP-Modul
Es repräsentiert ein in LISP geschriebenes Programm .
Header-Dateien
Dieses Ziel ermöglicht es , Kopfdateien zu gruppieren und zu definieren , wo diese installiert werden müssen .
Man-Dokumentation
Gruppiert Hilfeseiten , die vom Projekt gebraucht werden .
Info-Dokumentation
Gruppiert Infoseiten , die vom Projekt gebraucht werden .
Verschiedene Informationen
Gruppiert Datendateien , die vom Projekt gebraucht werden , wie z.B. Bilder , Oberflächenbeschreibungen , Einstellungsdateien usw.
Skript
Repräsentiert Programme , die Skripte sind . Skripte werden nur in den angegebenen Ordner installiert . Wenn Skripte erstellt werden , so sind zusätzliche Regeln notwendig .
Ziele oder das Projekt erstellen .
Ziele erstellen
Ein Ziel ist eine Datei , die aus Quelldateien erstellt wird . Üblicherweise ist es ein Programm oder eine Bibliothek , aber es kann auch eine Dokumentation sein , falls Weiterverarbeitung in irgendeiner Form notwendig ist .
Der Befehl zur Erstellung kompiliert alle erforderlichen Quelldateien und verlinkt diese gegebenenfalls mit anderen Dateien wie beispielsweise Bibliotheken , um das Ziel zu erstellen . Falls einige Quelldateien bereits kompiliert oder nicht verändert worden sind , so werden diese nicht erneut kompiliert , um Zeit zu sparen . Es gibt mehrere Wege , eine Erstellung anzustoßen .
Erstellen Erstellen Hauptmenü F7
Erstellen Projekt erstellen Hauptmenü Umschalttaste F7
Dateiverwaltungsleiste
Kontextmenü der Dateiverwaltung Erstellen Erstellen
Projektverwaltungsleiste
Kontextmenüs der Projektverwaltung Erstellen Erstellen
Erstellte Dateien entfernen .
Ziele bereinigen
Es kann nützlich sein , alle durch den Erstellungsprozess erstellten Dateien zu löschen . Zum Beispiel , wenn alle Abhängigkeiten nicht berücksichtigt werden und eine veränderte Datei keine erwartete erneute Compilierung auslöst . Das Löschen aller Dateien löst dies. Dies kann auf mehrere Weisen geschehen :
Erstellen Bereinigen Hauptmenü
Erstellen Projekt bereinigen Hauptmenü
Kontextmenü der Dateiverwaltung Erstellen Bereinigen
Kontextmenüs der Projektverwaltung Erstellen Bereinigen
Dateien kompilieren .
Dateien kompilieren
Die meisten Programmiersprachen ermöglichen das Compilieren von einzelnen Quelldateien . Die Datei wird gelesen , auf Syntaxfehler geprüft und in eine vorläufige Objektdatei umgewandelt . Die meisten Fehler passieren in diesem Schritt . Es ist daher sinnvoll , eine Datei nach Bearbeitung zu kompilieren und auf Fehler prüfen zu lassen . Dazu gibt es mehrere Möglichkeiten .
Erstellen Compilieren Hauptmenü F9
Dateiverwaltungsleiste
Kontextmenü der Dateiverwaltung Erstellen Compilieren
Projektverwaltungsleiste
Kontextmenü der Dateiverwaltung Erstellen Compilieren Seitenleiste der Projektverwaltung
Anjuta
Konfigurationsdialog für Autotools
Konfigurationsdialog für Autotools
Konfigurieren
Projekt neu generieren
Anjuta
Konfiguration
Mit diesem Eingabefeld benennen Sie verschiedene Konfigurationen , jede mit eigenen Optionen und eigenem Erstellungsordner . Normalerweise gibt es bereits eine Vorgabe-Konfiguration , eine Fehlerdiagnose-Konfiguration für einfache Fehlerdiagnose ( zwischenläufige Variablen und Befehlsreihenfolge bleiben unberührt ) und eine optimierte Konfiguration , die schnellere Programme bei längerer Erstellungsdauer produziert . Es können zusätzliche eigene Konfigurationen definiert werden .
Erstellungsordner
Wählen Sie den Erstellungsordner . Dieser darf auch der Projektordner oder ein Unterordner sein . Das ist speziell für den Wechsel zwischen verschiedenen Konfigurationen nützlich , um ein erneutes Erstellen des gesamten Projekts zu vermeiden .
Mit Autotools ist es nicht möglich , eine Konfiguration für einen anderen Ordner zu verwenden , wenn bereits eine Konfiguration den Projektordner verwendet . Diese muss zuvor entfernt werden .
Einige Autotools-Projekte können nicht außerhalb der Projektordners erstellt werden . Es können zwar dennoch verschiedene Konfigurationen eingesetzt werden , aber alle müssen den Projektordner verwenden und alles muss bei Konfigurationswechsel neu kompiliert werden .
Konfigurationsoptionen
Dieses Textfeld führt alle vom Konfigurationsvorgang eingesetzten Befehlszeilenargumente auf . Alle Argumente werden durch Leerzeichen getrennt und müssen in Zitatzeichen gesetzt werden , wenn sie Leerzeichen enthalten . Jede Konfiguration schreibt Voreinstelllungen in dieses Feld , welche Sie ändern können .
configure --help configure
Ein Autotools-Projekt konfigurieren und Konfigurationen verwalten .
Ein Projekt konfigurieren
Vor dem Compilieren und Erstellen von Dateien muss ein Autotools-Projekt konfiguriert werden . Dieser Schritt ist zum Einstellen globaler Optionen erforderlich , um zu prüfen , ob alle benötigten Bibliotheken und Programme auf dem System installiert sind , und um die passenden Erstellungsskripte zu generieren .
Das Projekt konfigurieren
Erstellen Projekt konfigurieren Hauptmenü

Ausführen
Die Konfiguration könnte scheitern , wenn einige Bibliotheken oder Programme nicht oder nicht in der richtigen Version installiert sind . Die Fehlermeldung informiert Sie darüber , was genau fehlt .
Die Konfiguration ändern
Erstellen Konfiguration wählen Weitere Konfiguration Hauptmenü
Wenn das Projekt noch nicht konfiguriert wurde , so wird es automatisch vor dem Erstellen einer Datei konfiguriert .
Konfiguration entfernen
Es ist vergleichbar mit dem Bereinigen eines Projekts , aber es werden noch mehr Dateien entfernt . Sie müssen Ihr Projekt danach neu konfigurieren , um es erstellen zu können .
Erstellen Konfiguration entfernen Hauptmenü
Ein Distributionspaket erstellen .
Ein Distributionspaket erstellen
configure make make install
Erstellen Tarball erstellen
Ziele oder das Projekt installieren .
Ziele installieren
/ usr/ local
Es gibt mehrere Möglichkeiten , Ziele oder ein Projekt zu installieren .
Erstellen Installieren Hauptmenü
Erstellen Projekt installieren Hauptmenü
Kontextmenü der Dateiverwaltung Erstellen Installieren
Kontextmenüs der Projektverwaltung Erstellen Installieren
su sudo
Autotools-Erstellungs-Plugin
Dieses Plugin ist für Autotools-Projekte ausgelegt , aber weil diese unter anderem auch » make « einbinden , ist es auch für andere Arten von Projekten geeignet , die auf » make « basieren .
Zu verwendender Make-Befehl
Nachfolgend finden Sie eine Liste der vom Plugin verwendeten Ziele . Sie sind in allen Autotools-Projekten implementiert , aber Sie müssen diese selbst implementieren , wenn Sie ein eigenes » makefile « einsetzen .
objekt_datei_name
Verwenden Sie dies , um eine Quelldatei zu kompilieren . Der Name der Objektdatei wird gebildet , indem die Erweiterung der Quelldatei durch die korrespondierende Objektdatei-Erweiterung ersetzt wird .
make
Verwenden Sie dies , um alle Ziele in einem Ordner zu erstellen .
make install
Verwenden Sie dies , um alle Ziele in einem Ordner zu installieren .
make clean
Verwenden Sie dies , um alle in einem Ordner erstellten Dateien zu löschen .
make dist
Verwenden Sie dies , um ein verteilbares Paket zu erstellen . Es wird nur im Projektordner aufgerufen .
Da » make « über Standardregeln verfügt , ist es möglich , ein C-Programm ohne Makefile zu erstellen und zu linken . Sie können ein C-Programm aus einer einzelnen Quelldatei erstellen , ohne Makefile oder umgebendes Projekt .
Dialog der Einstellungen zur Erstellung mit Autotools .
Dialog der Einstellungen zur Erstellung mit Autotools
Der Dialog ermöglicht das Festlegen globaler Optionen zum Erstellen von Dateien .
Mehrere Befehle zugleich ausführen
make
Bei Fehlern fortfahren
make
Meldungen übersetzen
Anjuta
Erstellungswarnungen und Fehler im Editor hervorheben
Fehlermeldungen und Warnungen während des Erstellungsvorgangs werden im Meldungsfenster angezeigt und hervorgehoben . Wenn Sie diese Option aktivieren , geschieht dies auch im Editorfenster .
Mit Administratorrechten installieren
sudo su
Wird zum Anlegen oder Bearbeiten von Haltepunkten verwendet
Haltepunkt-Dialog
Ort
Die Position des Haltepunkts . Sie kann für einen bestehenden Haltepunkt nicht geändert werden . Der Haltepunkt kann in einer bestimmten Zeilennummer oder an den Beginn einer Funktion festgelegt werden . Verwenden Sie eines der folgenden Formate :
Dateiname Zeilennummer
Funktionsname
Datei Funktionsname
Bedingung
WAHR FALSCH WAHR
WAHR
Durchgang
Die Fehlerdiagnose kann den Haltepunkt für eine bestimmte Anzahl an Durchgängen übergehen . Wenn die Durchgangszahl ungleich Null ist , so wird die Fehlerdiagnose den Haltepunkt eine bestimmte Anzahl Durchgänge durchlaufen , bevor angehalten wird .
Die Durchgangszahl hat höhere Präferenz als die Bedingung . Nur wenn die Durchgangszahl erreicht wurde , wertet die Fehlerdiagnose die Bedingung aus und hält das Programm an , falls diese vorhanden ist .
Verwalten von Haltepunkten .
Haltepunkte
Haltepunkte werden verwendet , um die Ausführung eines Programms an bestimmten Stellen zu unterbrechen , so dass der Zustand des Programms an diesen Stellen genauer untersucht werden kann .
Haltepunkte auflisten
Ansicht Haltepunkte Hauptmenü Haltepunkte
Die Ansicht gliedert sich in folgende Spalten :
Ort
Die Position des Haltepunkts im der Quelldatei . Wenn der Haltepunkt durch die Fehlerdiagnose festgelegt ist , werden zusätzliche Informationen wie die Funktion angezeigt , welche den Haltepunkt enthält .
Adresse
Das Feld enthält die Adresse des Haltepunkts , wenn dieser durch die Fehlerdiagnose festgelegt ist .
Typ
Haltepunkt
Bedingung
Dies ist die Bedingung des Haltepunkts . Falls leer , ist keine Bedingung festgelegt .
Durchgang
Wenn der Debugger nicht läuft , zeigt diese Spalte die Nummer des Durchgangs des Haltepunkts an , oder 0 , falls nichts festgelegt ist .
Wenn der Debugger läuft und die Durchgangsnummer 0 ist , dann zeigt diese Spalte die Anzahl an , wie oft dieser Haltepunkt ausgelöst wurde . Falls die Durchgangsnummer von 0 verschieden ist , werden beide Nummern angezeigt . Die Durchgangsnummer ist die zweite Zahl .
Status
Dies ist der Status des Haltepunkts . Folgende Zustände sind möglich :
Ausstehend :
Der Haltepunkt ist in Ihrem Programm nicht festgelegt .
Permanent :
Der Haltepunkt ist gesetzt ( Kennung ist in Klammern angegeben ) .
Temporär :
Der Haltepunkt ist gesetzt , wird aber gelöscht , sobald er erreicht wurde .
Alle Haltepunkte bleiben über Anjuta-Sitzungen erhalten , selbst wenn sie auf nicht vorhandene Orte verweisen , beispielsweise eine Quelldatei in einer Bibliothek , die noch nicht geladen wurde . In diesem Fall wird der Status auf » Ausstehend « gesetzt .
Haltepunkte setzen
Fehlerdiagnose Haltepunkt setzen Hauptmenü Haltepunkte Haltepunkt setzen
Ort Ort
Eine weitere Lösung ist es , Haltepunkte ein- und auszuschalten . Wenn für die aktuelle Zeile kein Haltepunkt gesetzt ist , so wird einer hinzugefügt . Andernfalls wird dieser entfernt .
Fehlerdiagnose Haltepunkt an/ aus Hauptmenü Haltepunkte Haltepunkt an/ aus
Haltepunkte bearbeiten
Der Ort eines Haltepunkts kann nicht geändert werden . Erstellen Sie stattdessen einen neuen . Die Haltebedingung oder der Durchgang können jedoch angepasst werden . So bearbeiten Sie einen Haltepunkt :
Haltepunkt
Haltepunkt Haltepunkt bearbeiten
Bedingung Durchgang OK
Haltepunkte entfernen
Haltepunkt an/ aus
Haltepunkt Haltepunkt entfernen
Sie können alle Haltepunkte folgendermaßen entfernen :
Fehlerdiagnose Alle Haltepunkte entfernen Hauptmenü Haltepunkt Alle Haltepunkte entfernen
Aktivieren und Deaktivieren von Haltepunkten
Gelegentlich bietet es sich an , den Haltepunkt vorübergehend zu deaktivieren , anstatt diesen zu löschen . So deaktivieren oder reaktivieren Sie einen Haltepunkt :
Aktivieren Haltepunkt Haltepunkt Haltepunkt aktivieren Haltepunkt deaktivieren
Sie können alle Haltepunkte folgendermaßen deaktivieren :
Fehlerdiagnose Alle Haltepunkte deaktivieren Hauptmenü Haltepunkt Alle Haltepunkte deaktivieren
Informationen des Prozessors untersuchen .
CPU
Prozessorregister betrachten
Ansicht Register Hauptmenü Register
Register , deren Wert seit dem letzten Stopp geändert wurden , werden rot dargestellt . Es ist möglich , den Wert eines beliebigen Registers zu ändern , indem Sie in die Wertspalte klicken und einen neuen Wert eingeben .
Speicher betrachten
Ansicht Speicher Hauptmenü Speicher
Die erste Spalte zeigt die Speicheradressen hexadezimal an , die zweite Spalte den Speicherinhalt wiederum hexadezimal , und die letzte Spalte zeigt den Speicherinhalt im ASCII-Format an .
Zu Adresse springen
Disassemblierung ansehen
Ansicht Disassemblierung Hauptmenü Disassemblierung
Die erste Spalte zeigt die Adresse hexadezimal an . In der zweiten Spalte darf eine mit einem Doppelpunkt abgeschlossene Beschriftung zu Zeilenanfang stehen , oder eine Anweisung in Maschinensprache , welche mit 4 Leerzeichen eingerückt ist .
Disassemblierung
Einen benutzerdefinierten Debugger-Befehl verwenden
Benutzerdefinierter Befehl
Ein benutzerdefinierter Befehl kann folgendermaßen an die Fehlerdiagnose gesendet werden :
Fehlerdiagnose Befehl diagnostizieren Hauptmenü
Geben Sie Ihren Befehl ein .
Die Ausgabe des Befehls wird im Meldungsfenster des Debuggers angezeigt .
Haltepunkt
Programmdaten untersuchen .
Daten untersuchen
Ausführung des Programms steuern .
Ausführung steuern
Ausdrücke inspizieren und Variablen verändern .
Ausdrücke untersuchen
Einen Ausdruck inspizieren und eine Variable verändern
Bei der Diagnose eines Programms wird der Wert eines Ausdrucks oder einer Variablen angezeigt , während das Programm angehalten ist . Manchmal ist es auch nützlich , den Wert einer Variablen abzuändern .
Fehlerdiagnose Inspizieren/ auswerten Hauptmenü Editor Inspizieren/ auswerten
Wert
Zusätzliche Programminformationen untersuchen .
Verschiedene Informationen
Der Debugger kann verschiedene Informationen über das Programm liefern , während es läuft .
Gemeinsam genutzten Bibliotheken betrachten
Fehlerdiagnose Information Gemeinsam verwendete Bibliotheken Hauptmenü
Dadurch wird ein Fenster geöffnet , das alle vom Programm geladenen gemeinsamen Bibliotheken sowie deren Speicherbereiche auflistet . Es zeigt außerdem für jede der Bibliotheken , ob deren Symboltabelle geladen ist oder nicht .
Signale betrachten
Fehlerdiagnose Information Kernel-Signale Hauptmenü
Dies listet alle verfügbaren Signale einschließlich einer Kurzbeschreibung und drei Spalten , welche angeben , was zu tun ist , wenn ein Signal empfangen wird :
Stopp
Der Debugger stoppt die Ausführung des Programms , sobald das Programm dieses Signal empfängt .
Drucken
Der Debugger zeigt das empfangene Signal an .
Durchgang
Der Debugger übergibt das Signal an das Programm .
Die Einträge des über einen Klick mit der rechten Maustaste erreichbare Kontextmenü sind derzeit deaktiviert , da die entsprechenden Funktionen noch nicht implementiert wurden .
Lokale Variablen untersuchen .
Lokale Variablen
Lokale Variablen
Auflisten lokaler Variablen
Ansicht Lokale Variablen Hauptmenü Lokale Variablen
Alle lokalen Variablen werden in einer Baumansicht mit Unterelementen zur Darstellung von Strukturen oder Feldelementen angezeigt .
Variable
Der Name der Variable .
Wert
Der Wert der Variable .
Der Typ der Variable .
Den Wert einer Variable ändern
Lokale Variablen Wert
Der Typ des neuen Werts .
Dialog » An Prozess anhängen «
Dialog » An Prozess anhängen «
An Prozess anhängen
Pfade verbergen
Dadurch werden Befehlspfade in der Prozessliste verborgen , falls aktiviert .
Prozess-Parameter verstecken
Dadurch werden Befehlszeilenargumente in der Prozessliste verborgen , falls aktiviert .
Prozessbaum anzeigen
Falls deaktiviert , werden die Prozesse in einer Liste dargestellt . Wenn aktiviert , werden die Prozesse in einer Baumansicht dargestellt .
Ein Programm in einem Debugger starten .
Ein Programm diagnostizieren
Ein Programm in einem Debugger starten
Programmparameter
Ausführen Programm diagnostizieren Hauptmenü Umschalttaste F12

Fehlerdiagnose in einer bereits laufenden Anwendung
Der Debugger kann in einer bereits laufenden Anwendung verwendet werden .
Ausführen Einen Prozess diagnostizieren Hauptmenü
An Prozess anhängen Anhängen
Fehlerdiagnose einer entfernten Anwendung
Der Debugger kann zum Debuggen einer auf einem anderen Rechner laufenden Anwendung verwendet werden , sofern der Rechner über eine TCP- oder serielle Verbindung angeschlossen ist .
Ausführen Entferntes Ziel diagnostizieren Hauptmenü
Serielle Kabelverbindung TCP/ IP-Verbindung
Adresse Port
/ dev/ ttyb
Verbinden
Debugger anhalten
Die Fehlerdiagnose und das Programm können jederzeit so beendet werden :
Ausführen Fehlerdiagnose anhalten Hauptmenü
Den Stack untersuchen .
Stack
Stack-Frames auflisten
Ein Stack-Frame ist der Bereich des Stacks , der einem Funktionsaufruf zugeordnet ist . Es werden alle Funktionen und deren Aufrufargumente in der Aufrufreihenfolge aufgeführt . Jeder Stack-Frames ist beginnend mit 0 ab der aktuellen Funktion nummeriert . Die Stack-Frames werden nur angezeigt , während die Fehlerdiagnose läuft .
Ein Programm kann aus mehreren Threads bestehen . Alle diese Threads werden unabhängig voneinander ausgeführt , mit eigenen Registern , Stacks und lokalen Variablen , aber mit gemeinsamen globalen Variablen .
Ansicht Stack Hauptmenü Stack
Die Stacks werden in einer Baumansicht dargestellt , jeweils mit dem zugehörigen Thread übergeordnet . Die folgenden Informationen werden angezeigt :
Aktiv
Der gelbe Pfeil repräsentiert den aktiven Stack-Frame . Laut Vorgabe ist dies Frame 0 , d.h. die aktuelle Funktion . Alle Auswertungen und lokalen Variablen sind relativ zu diesem aktiven Frame . Wechseln Sie den aktuellen Stack-Frame , um lokale Variablen anderer Funktionen zu untersuchen .
Thread
Eine Nummer , korrespondierend zu jedem Thread .
Frame
main( )
Datei
Der Name der Datei , welche die Funktion des aktuellen Threads enthält .
Zeile
Die Zeilennummer der Funktion , die diesem Frame entspricht .
Funktion
Der Name der Funktion , welche diesem Frame entspricht .
Die Adresse der Funktion , welche diesem Frame entspricht .
Argumente
Die Funktionsargumente .
Den aktuellen Stack-Frame oder Thread wechseln
Stack
Aktuellen Frame auswählen
Ein Klick auf einen Stack-Rahmen im selben Thread wechselt nur den Stack-Rahmen , so dass andere lokale Variablen untersucht werden können . Wird dies in einem anderen Thread getan , so ändern sich sowohl der Stack-Rahmen als auch der Thread . Die Registerwerte werden andere sein und die Fehlerdiagnose wird im gewählten Thread neu gestartet .
Die aktuelle Funktion betrachten
Quelle anzeigen
Stacktrace ermitteln
Stack Stacktrace holen
Anhalten und Fortsetzen
Anhalten und Einzelschritt
Ähnlich wie in der Videobearbeitung kann das Programm in Zeitlupe ausgeführt werden , wobei Sie fortsetzen , pausieren und anhalten können usw. So können Sie das Verhalten des Programms besser nachvollziehen . Sie können es jedoch nicht rückwärts laufen lassen .
Hineinspringen
Hauptmenü Fehlerdiagnose Hineinspringen F5 Hineinspringen
Einzelschritte führen nur eine Programmanweisung aus ( ab Haltepunkt ) und geben dann die Kontrolle zurück . Wenn die ausgeführte Anweisung eine Funktion ausführt , so versucht die Fehlerdiagnose in die Funktion zu springen ( in der Reihenfolge , in der die Funktionen ausgeführt werden ) . Sobald die Anweisung ausgeführt und die Kontrolle zurück gegeben wurde , können Sie den Zustand Ihres Programms analysieren .
Disassemblierung
Einzelner Schritt über eine Funktion
Fehlerdiagnose Überspringen Hauptmenü F6 Überspringen
Überspringen ist ähnlich wie Einzelschritt mit der Ausnahme , dass nicht innerhalb von Funktionen bei ausgeführten Anweisungen angehalten wird .
Disassemblierung
Herausspringen
Fehlerdiagnose Herausspringen Hauptmenü Umschalttaste F5 Herausspringen
Herausspringen führt die aktuelle Funktion aus , bis diese in die aufrufende Funktion zurückkehrt .
Ausführen und Fortsetzen
Fehlerdiagnose Ausführen/ Fortsetzen Hauptmenü F4 Fortsetzen
Dieser Befehl startet das Programm neu und führt es aus , bis ein Haltepunkt angelaufen wird oder das Programm regulär beendet wird .
Ausführen bis
Fehlerdiagnose Bis zur Eingabemarke ausführen Hauptmenü F4 Bis zur Eingabemarke ausführen
Disassemblierung
Programm stoppen
Fehlerdiagnose Programm anhalten Hauptmenü Anhalten
Das Programm unterbrechen und Kontrolle zurück an die Fehlerdiagnose geben , so dass diagnostiziert werden kann , wie z.B. Inspizieren von Daten oder Hinzufügen von Haltepunkten .
Tipps und Tricks zur Fehlerdiagnose .
Tipps zur Fehlerdiagnose
Korrigieren von kritischen Fehlern in GLib/ GTK+
G_DEBUG fatal_criticals
Ausführen Programmparameter
Umgebungsvariablen
Neu
Name G_DEBUG Wert fatal_criticals
Anwenden
Ausführen Programm diagnostizieren
Verwenden Sie das Programm , bis der kritische Fehler auftritt .

Die oberste Funktion mit Frame-Nummer 0 ist in GLib , d.h. Sie müssen weiter unten im Stack schauen . Oft liegt der Fehler in der obersten Funktion , welche in Ihrem Programm liegt .
Ausdrücke und Variablen überwachen .
Ausdrücke überwachen
Einzelschritt
Überwachte Ausdrücke auflisten
Ansicht Überwachte Ausdrücke Überwachte Ausdrücke Hauptmenü
Ähnlich lokalen Variablen werden alle überwachten Ausdrücke in einem Baum mit Unterelementen zur Darstellung von Strukturen oder Feldelementen angezeigt .
Der Name der Variable oder des Ausdrucks .
Die Variable oder Ausdruckswert .
Der Typ der Variable oder des Ausdrucksergebnisses .
Überwachte Ausdrücke aktualisieren
Überwachte Ausdrücke können bei Programmstopp oder auf Anfrage automatisch aktualisiert werden .
So stellen Sie einen überwachten Ausdruck so ein , dass dieser automatisch aktualisiert wird :
Überwachte Ausdrücke Automatisch aktualisieren
So aktualisieren Sie eine Ausdrucksüberwachung :
Überwachte Ausdrücke Beobachteten Ausdruck aktualisieren
So aktualisieren Sie die überwachten Ausdrücke manuell in einem Arbeitsgang :
Überwachte Ausdrücke Alle aktualisieren
Eine Überwachung zu einem Ausdruck hinzufügen
So fügen Sie einen Ausdruck zur Überwachungsliste hinzu :
Fehlerdiagnose Ausdruck hinzufügen Hauptmenü Ausdruck hinzufügen Überwachte Ausdrücke
Automatisch aktualisieren
Das Ergebnis eines Ausdrucks kann folgendermaßen zur Überwachung hinzugefügt werden :
Fehlerdiagnose Inspizieren/ auswerten Hauptmenü Überwachte Ausdrücke Inspizieren/ auswerten
Hinzufügen
Einen überwachten Ausdruck entfernen
Sie können einen Ausdruck aus der Überwachungsliste entfernen .
Überwachte Ausdrücke Beobachteten Ausdruck entfernen
Alle Überwachungen können gleichzeitig entfernt werden .
Überwachte Ausdrücke Alle entfernen
Wenn ein überwachter Ausdruck einer Variablen entspricht , dann können Sie deren Wert ändern .
Überwachte Ausdrücke Wert
Geben Sie den neuen Wert ein .
Ordner-basiertes Projekt-Backend
Plugin für Ordner-basiertes Projekt-Backend
.c .py
Anjuta
Es ist nicht möglich , bei einem Projekt mit diesem Backend etwas zu ändern oder hinzuzufügen . Wenn Sie aber eine Quelldatei mit der passenden Erweiterung im Projektordner hinzufügen , so wird es automatisch hinzugefügt .
Alle Hilfethemen .
Index_
Einführung
Anjuta
Anjuta
Anjuta
Anjuta Anjuta Anjuta
Anjuta Anjuta
Anjuta
Anjuta
Anjuta
Unterstützte Funktionsmerkmale der Emacs-Modelines .
Emacs-Modelines
: ; -*-
Emacs
/ * -*- Mode : C ; indent-tabs-mode : t ; c-basic-offset : 4 ; tab-width : 4 -*- */
Anjuta unterstützt nur die folgenden Variablen .
indent-tabs-mode
t nil
tab-width
Anzahl an Leerzeichen , die einem Tabulator-Sprung entsprechen .
c-basic-offset
Anzahl an Leerzeichen , die zum Einrücken von C-Code verwendet werden .
Unterstützte Funktionsmerkmale der Vim-Modelines .
Vim-Modelines
vim : = :
Vim
/ * vim : set noet ts=4 sw=4 : */
Anjuta unterstützt nur die folgenden Variablen .
expandtab
et
Leerzeichen für Einzüge verwenden .
noexpandtab
noet
Tabulatoren für Einzüge verwenden .
softtabstop
sts
tabstop
ts
shiftwidth
sw
Makefile-basiertes Projekt-Backend
Plugin für Makefile-basiertes Projekt-Backend
Ein » makefile « ist vermutlich die meist genutzte Methode , Software auf verschiedensten Plattformen zu erstellen . Ein » makefile « enthält eine Liste oder Regeln , die beschreiben , welche Befehle ausgeführt werden müssen , um ein Ziel unter Berücksichtigung all seiner Abhängigkeiten zu erstellen . Bei der Erstellung eines Programms ist das Ziel eine Objektdatei , und die Abhängigkeiten sind die Quelldateien . Das Ziel einer Regel kann eine Abhängigkeit einer anderen sein . Regeln können demnach untereinander verkettet sein bei der Erstellung des endgültigen Ziels .
Anjuta
Wenn das Projekt-Backend nicht in der Lage ist , alle Quelldateien zu finden , so können Sie probieren , dass Ordner-Backend statt dessen zu verwenden . Es erkennt keine Ziele , sollte aber alle Quelldateien finden .
Das Ändern von Eigenschaften , Hinzufügen und Entfernen von Zielen und Quelldateien sind für dieses Backend deaktiviert , weil ein automatisches Bearbeiten nicht implementiert ist . Es muss von Hand mit einem Texteditor geändert werden . Nach jedem Speichern der makefile-Datei wird diese automatisch neu eingelesen .
Ein bereits existierendes Projekt importieren .
Ein Projekt importieren
Anjuta .anjuta Anjuta
Datei Neu Projekt aus vorhandenen Quellen Hauptmenü Projekt aus vorhandenen Quellen Neu oberen Werkzeugleiste
Aus Ordner importieren
Aus Versionskontrolle importieren
Projektname Importieren Anjuta
Anjuta
Einen Ordner zu einem Projekt hinzufügen .
Einen Ordner hinzufügen
Ein Ordner ermöglicht es mehrere Ziele zu gruppieren mit gemeinsamen Eigenschaften für alle . Er entspricht oft einem Verzeichnis .
Projektansicht Kontextmenü des Projekts Gruppe hinzufügen
Projekt Gruppe hinzufügen Hauptmenü
Geben Sie den neuen Gruppennamen ein .
Gruppennamen sind typischerweise auf Buchstaben , Ziffern und den Unterstrich beschränkt . Es ist ratsam , andere Zeichen zu vermeiden .
Ordnerbaumansicht
Hinzufügen
Dateien zu einem Projekt hinzufügen , bearbeiten oder aus einem Projekt entfernen .
Ordner verwalten
Ordner aus einem Projekt entfernen .
Ordner entfernen
Projektansicht Kontextmenü des Projekts Entfernen
Ein Bestätigungsdialog wird geöffnet , und der Ordner wird nur aus dem Projekt entfernt , nicht von Ihrer Festplatte .
Eine benutzerdefinierte Bibliothek zu einem Ziel hinzufügen .
Eine benutzerdefinierte Bibliothek hinzufügen
hier
Um eine Bibliothek in C nutzen zu können , müssen Sie dem Compiler mitteilen , wo sich die Header-Dateien befinden und dem Linker mitteilen , wo die erforderlichen Bibliotheken aufzufinden sind . Das Problem ist , dass Ihr Programm nicht auf einem anderen Rechner kompilieren wird , wenn sich die Header- oder Bibliotheksdateien an einem anderen Ort befinden .
Projektansicht Projekt-Kontextmenü Eigenschaften
Hauptmenü Projekt Eigenschaften
/ usr/ include include_path C-Präprozessorflags gcc
Weitere Optionen Anwenden
Projektansicht Kontextmenü des Projekts Eigenschaften
Linker-flags Bibliotheks_Name gcc > Bibliotheks_Name lib .a .so
gcc Bibliotheks_Name
Bibliotheken zu Projektzielen hinzufügen oder daraus entfernen .
Bibliotheken verwalten
Eine benutzerdefinierte Bibliothek aus einem Ziel entfernen .
Eine benutzerdefinierte Bibliothek entfernen
Projektansicht Kontextmenü des Projekts Eigenschaften
C-Präprozessor-Flags Linker-Flags Anwenden
So füen Sie einen Satz Bibliotheken einem Ziel hinzu .
Paketierte Bibliotheken hinzufügen
pkg-config
Projektansicht Kontextmenü des Projekts Hinzufügen
Hauptmenü Projekt Bibliothek hinzufügen
Zielwahlknopf
Modulansicht
Modulansicht Neue Bibliothek diesen Anweisungen
Nach dem Erstellen eines neuen Moduls müssen Sie einige Sekunden warten , bis die Projektdateien neu geladen wurden und das neue Modul in der Liste erscheint .
Hinzufügen
Gruppiert Bibliotheken in einem Modul .
Ein Modul hinzufügen
Ein Paket kann nicht direkt zu Ihrem Programm hinzugefügt werden , sondern muss in einem Modul gruppiert werden .
Projektansicht Kontextmenü des Projekts Bibliothek hinzufügen
Bibliothek hinzufügen Neue Bibliothek
Eine Liste aller auf Ihrem System installierten Bibliotheken wird angezeigt . Sie können eine oder mehrere Bibliotheken auswählen .
Falls die gewünschte Bibliothek hier nicht erscheint :
pkg-config .pc

Nach Auswahl einer Bibliothek wird automatisch ein Modulname erstellt , der aber angepasst werden kann . Sie können einen vorhandenen Modulnamen wählen , um die neue Bibliothek hinzuzufügen und zu allen Zielen , die es bereits verwendet .
Hinzufügen
Einen Satz Bibliotheken von einem Ziel entfernen .
Ein Modul entfernen
Projektansicht Kontextmenü des Projekts Entfernen
Ein Bestätigungsdialog wird geöffnet , und die Bibliothek wird aus dem Ziel entfernt .
Eine Bibliothek aus einem Modul entfernen .
Ein Paket entfernen
Projektansicht Kontextmenü des Projekts Entfernen
Ein Bestätigungsdialog wird geöffnet , und das Paket wird aus der Projektdatei entfernt .
Projektverwaltung
Projektverwaltung-Plugin
Anjuta
Anjuta
Was auch immer das darunterliegende Backend ist , die grafische Benutzeroberfläche wird immer die gleiche sein . Allerdings könnten einige Funktionen deaktiviert sein .
Projekt-Backend-Plugin
Projekteigenschaften bearbeiten .
Ein Projekt bearbeiten
Vorhandene Dateien zu einem Projekt hinzufügen .
Dateien hinzufügen
Projektansicht Kontextmenü des Projekts Quelldatei hinzufügen
Projekt Quelldatei hinzufügen Hauptmenü
Zielwahlknopf
Hinzufügen Strg Umschalttaste
Die können Dateien in Unterordner des Projekts hinzufügen . Die meisten Projektformate erfordern die Dateien im Projektordner . Dateien , die außerhalb des Projektordners hinzugefügt wurden , werden automatisch in diesen kopiert , um die Bedingung zu erfüllen .
Dateien zu einem Projekt hinzufügen oder daraus entfernen .
Dateien verwalten
Dateien aus einem Projekt entfernen .
Dateien entfernen
Projektansicht Kontextmenü des Projekts Entfernen
Ein Bestätigungsdialog wird geöffnet , und die Datei wird nur aus dem Projekt entfernt , nicht von Ihrer Festplatte .
Strg Umschalttaste
Ein Ziel zu einem Projekt hinzufügen .
Ein Ziel hinzufügen
Ein Ziel gruppiert Dateien und legt deren Verwendung fest . Es wird verwendet , um ein Programm mit all seinen Quelldateien und deren Unterelementen darzustellen , oder nur um Datendateien zu gruppieren , die im selben Ordner installiert werden sollen .
Projektansicht Kontextmenü des Projekts Neues Ziel
Hauptmenü Projekt Neues Ziel
Ordnerbaumansicht
Geben Sie einen Zielnamen ein und wählen Sie den Zieltyp in der Auswahlliste darunter . Je nach Projekt-Backend sind verschiedene Zieltypen möglich .
Zielnamen sind typischerweise auf Buchstaben , Ziffern und den Unterstrich beschränkt . Es ist ratsam , andere Zeichen zu vermeiden .
Hinzufügen
Ein Ziel zum Projekt hinzufügen , es bearbeiten oder aus dem Projekt entfernen .
Ziele verwalten
Ein Ziel aus einem Projekt entfernen .
Ein Ziel entfernen
Projektansicht Kontextmenü des Projekts Entfernen
Bestätigen Sie das Entfernen . Alle Ziele und deren Eigenschaften werden von den Projektdateien entfernt . Alle Dateien des Ziels verbleiben unbeschadet auf Ihrem Datenträger .
Den Inhalt des Projekts anzeigen .
Ein Projekt betrachten
Ein Projekt wird als Baum dargestellt . Die Wurzel entspricht dem Projekt und die Unterelemente repräsentieren Programme , Bibliotheken , Ordner und Quelldateien . Jeder Knoten kann Eigenschaften besitzen , mit denen genauere Informationen wie Projektversion , Compiler-Flags und Installationsordner festgelegt werden . Diese Knoten sind in verschiedene Kategorien eingeteilt . Abhängig vom Backend sind nicht alle verfügbar :
Root
Es gibt nur einen Knoten dieser Art. Er repräsentiert das Projekt selbst . Hier können Sie für das gesamte Projekt geltende Eigenschaften ändern , wie den Namen und die Version .
Modul

Paket

Ordner

Ziel

Sie können Ziele mittels Ziehen-und-Ablegen an den Anfang der Projektbaumansicht ablegen , um eine Verknüpfung zu erstellen , mit der Sie auf diese einfacher zugreifen können . Die Voreinstellung ist , dass alle Programmziele dort bereits abgelegt werden .
Quelle

Ein neues Projekt von Grund auf erstellen .
Ein Projekt erstellen
Anjuta
Datei Neu Projekt Hauptmenü
Neu oberen Werkzeugleiste Projekt
Weiter
Fahren Sie mit der Maus über eines der Projektsymbole . Eine kleine Meldung erscheint , in der weitere Informationen über den jeweiligen Projekttyp angezeigt werden .
Weiter
Zurück
Fahren Sie mit der Maus über einen Knopf oder ein Eingabefeld . Eine kleine Meldung erscheint , in der weitere Informationen über die jeweilige Einstellung angezeigt werden .
Anwenden Anjuta
Anjuta
Vorlage für Projekt-Assistenten .
Vorlage für Projekt-Assistenten
autogen .wiz
.wiz hier
Ausführungsparameter-Dialog
Ausführungsparameter-Dialog
Ausführungsparameter
Programm
Durchsuchen
Argumente
Dies sind Befehlszeilenargumente , die von Ihrem Programm verwendet werden . Die Auswahlliste enthält eine Chronik der zuletzt verwendeten Argumente .
Arbeitsordner
Der Arbeitsordner ist der aktuelle Ordner bei der Ausführung Ihres Programms .
Umgebungsvariablen
Klicken Sie auf die Auswahlliste , um alle Umgebungsvariablen anzuzeigen , die durch Ihr Programm zugänglich sind . Dies sind normalerweise alle aktuellen Umgebungsvariablen . Sie werden in hellem Grau dargestellt .
Neu
Bearbeiten
Löschen
Wenn eine Variable nicht den gleichen Wert wie in der aktuellen Umgebung hat , so wird diese in schwarz dargestellt .
Im Terminal ausführen
Wählen Sie dies , um das Programm in einem Terminal auszuführen , so dass Sie Eingaben tätigen und Ausgaben lesen können , auch mit Hilfe von Unix-Streams . Es ist für Programme mit grafischer Oberfläche nicht erforderlich .
Ein Programm ohne Debugger ausführen .
Ein Programm ausführen
Anjuta
Ausführen Ausführen Hauptmenü F3
Parameter
Ausführen Programmparameter Hauptmenü

Alle Fenster und Dialoge .
Fenster und Dialoge
Editor für Benutzeroberflächen
Signale automatisch verbinden
Signale zum Signaleditor hinzufügen
Die Signalsteuerung erstellen
C
Python
Vala
Erste Schritte mit dem Editor für grafische Benutzeroberflächen
Den Editor für grafische Benutzeroberflächen starten
Eine neue Oberflächendatei erstellen
Keine vorhandene Oberflächendatei öffnen
Widgets hinzufügen
Widgets in Containern organisieren
Häufige Widgets und deren Zweck
Widget-Eigenschaften hinzufügen
Code-Erzeugung für Widgets
Anjuta
Automatische Erstellung
.ui Anwendung.c

Einen Satz Bibliotheken erstellen .
Ein Modul erstellen
Anjuta Nicht paketierte Bibliothek hinzufügen
Projektansicht Kontextmenü des Projekts Bibliothek hinzufügen Neue Bibliothek
Projekt Neue Bibliothek Hauptmenü
nächste Seite
Ein Paket hinzufügen
Projektansicht Kontextmenü des Projekts Neue Bibliothek
Hinzufügen
nächste Seite

Mario Blättermann
original
Hilfe zu Anjuta DevStudio.link
Anjutatext
Anjuta Entwicklungsstudio
Johannes Schmid
Anjuta-Logo
Projektverwaltung
Coding und Navigieren durch den Code
Projekt erstellen
Fehlerdiagnoseprogramm
Referenz
Die Funktionsmerkmale des integrierten Editors einrichten und verwenden
Automatisches Vervollständigen und Calltips
Automatisches Vervollständigen
Eingabetaste Bearbeiten Automatische Vervollständigung
pkg-config
Außerdem könnte die Syntax für den eingebauten Parser zu komplex sein , so dass nicht erkannt werden kann , welche Vervollständigung benötigt wird
Effektives Coding mit Hilfe von Calltips
Es ist normalerweise schwierig , die Signatur jeder Methode oder Funktion eines Projekts auswendig zu wissen . Der Editor zeigt automaitsch ein kleine Mini-Hilfe mit der Signatur an , wenn Sie » ( « nach einem Funktionsnamen eingeben .
So finden Sie schnell gesuchte Informationen in der API-Dokumentation
Verwendung der API-Referenz
Durchsuchen der API-Referenz
Bearbeiten Einstellungen Allgemein Plugins DevHelp
Die API-Referenz besteht aus zwei Fenstern , einem für die Suche nach einem bestimmten Symbol und dem Browser für die Anzeige der Hilfedokumente .
Mit Tastenkürzeln im Editor zur API-Referenz springen
Umschalt F1 Hilfe Kontext-Hilfe
Automatische Einzüge für einen konsistenten Code-Stil einrichten und verwenden
Auto-Einrücken
Konfigurieren und Verwenden der automatischen Einrückung
Manuelle Konfiguration
Bearbeiten Einstellungen
Ein großer Nachteil der manuellen Einrichtung der Einrückungen besteht in der Notwendigkeit , dass alle an einem Projekt beteiligten Entwickler die gleichen Einstellungen verwenden müssen , anderenfalls werden in einer Datei mehrere Einrückungsstile auftauchen . Eine bessere Lösung finden Sie im nächsten Abschnitt .
Nur wenn Sie die Einrückung explizit in den Einstellungen geändert haben , werden diese angewendet , ansonsten ist die Modeline einer Datei maßgebend . So sorgt die Modeline dafür , die Datei konsistent zu halten .
Modelines
Modelines werden verwendet , um Editoren die automatische Ermittlung der Einrückung in einer bestimmten Datei zu ermöglichen . Sie sind insbesondere dann nützlich , wenn viele Entwickler in unterschiedlichen Umgebungen an einem Projekt arbeiten .
Vim Emacs
Codeblöcke einrücken
Bearbeiten Automatische Einrückung
Effiziente Möglichkeiten zum Navigieren durch den Quellcode
Navigieren durch den Code mit dem Symbolbrowser
Verwendung des Symbolbrowsers
Der Symbolbrowser gibt Ihnen eine Übersicht über die in Ihrem Projekt verwendeten Symbole . Symbole beziehen sich hier auf Variablen , Funktionen/ Methoden und Klassen . Die exakte Definitionen hängt von der verwendeten Programmiersprache ab .
Der Symbolbrowser verfügt über drei Reiter :
Datei
Projekt
Suchen Strg L
Ein Doppelklick auf ein Symbol führt Sie direkt zur Definition des Symbols im Editor .
Navigieren im Editor
Gehe zu
Symboldefinition
Symboldeklaration
Gehe zu Previous history Next history
Autotools-basiertes Projekt-Backend .
Sébastien Granjoux
Philip Chimento
Plugin für GNU Autotools-basiertes Projekt
configure make make install
Anjuta configure.ac Makefile.am
Fehlerbericht
Autotools Ordner-Eigenschaften bearbeiten .
Einen Autotools-Ordner bearbeiten
Diese Eigenschaft ermöglicht Ihnen gemeinsame Eigenschaften für alle Ziele festzulegen , die zu diesem Ordner gehören .
C Compiler-Flags
Flags , die dem C-Compiler übergeben werden sollen , wenn ein Wert pro Ziel nicht definiert ist .
Flags für C-Präprozessor
Diese Flags werden jedem Übersetzungsvorgang übergeben , der den C-Präprozessor aufruft . Dieser Wert wird ignoriert , wenn diese Flags für das Ziel definiert sind .
C++ Compiler-Flags
Flags , die dem C++-Compiler übergeben werden sollen , wenn ein Wert pro Ziel nicht definiert ist .
Flags für Fortran-Compiler
Flags , die dem Fortran 9x-Compiler übergeben werden sollen , wenn ein Wert pro Ziel nicht definiert ist .
Installationsordner
Hier werden Installationsordner festgelegt . Es wird gebraucht , wenn Sie Dateien in eigene Ordner installieren wollen .
Java Compiler-Flags
Flags , die dem Java-Compiler übergeben werden sollen , wenn ein Wert pro Ziel nicht definiert ist .
Flags für Lex/ Flex
Flags , die dem Scanner-Generator Lex oder Flex übergeben werden sollen , wenn ein Wert pro Ziel nicht definiert ist .
Flags für Linker
Flags , die dem Linker übergeben werden sollen , wenn ein Wert pro Ziel nicht definiert ist .
Flags für Objective C-Compiler
Flags , die dem Objective C-Compiler übergeben werden sollen , wenn ein Wert pro Ziel nicht definiert ist .
Vala Compiler-Flags
Flags , die dem Vala-Compiler übergeben werden sollen , wenn ein Wert pro Ziel nicht definiert ist .
Flags für Yacc/ Bison
Flags , die dem Parser-Generator Bison oder Yacc übergeben werden sollen , wenn ein Wert pro Ziel nicht definiert ist .
Autotools Projekt-Eigenschaften bearbeiten .
Autotools Projekt-Eigenschaften bearbeiten .
Dies sind die Eigenschaften des Hauptobjekts .
Backend
Dies ist das Backend , das vom Projekt verwendet wird : Autotools . Ein anderes Backend kann mit Klick auf diesen Knopf gewählt werden . Es kann nützlich sein , falls das aktuelle Backend Schwierigkeiten hat Ihre Projektdateien zu verarbeiten .
Name
Der Name Ihres Projekts , der auch Leerzeichen enthalten darf .
Version
Dies ist die Projektversion .
Adresse für Fehlerbericht
Dies ist eine Adresse , die es ermöglicht , Fehlerberichte zu senden , zum Beispiel eine E-Mail-Adresse oder ein Verweis auf eine Fehlerdatenbank . Es ist optional .
Paketname
Dies ist der Name des Distributionspakets . Es sollte keine Leerzeichen enthalten . Er ist optional .
Adresse
Dies ist die Homepage des Projekts . Sie ist optional .

Autotools Ziel-Eigenschaften bearbeiten
Ein Autotools-Ziel bearbeiten
Hier ist eine Liste aller Zieleigenschaften , die in Autotools-Projekten verwendet werden . Einige sind nicht für alle Ziele verfügbar .
Nur zum Test erstellen
Wenn ausgewählt wird dieses Ziel nicht installiert und muss nur beim Ausführen von Tests erstellt werden .
Die Flags , die dem C-Compiler beim Übersetzen von Ziel-Quelldateien übergeben werden . Dieser Wert überschreibt gegebenenfalls denjenigen aus dem übergeordneten Ordner .
Diese Flags werden jeder Übersetzung übergeben , die den C-Präprozessor aufruft . Dieser Wert überschreibt gegebenenfalls denjenigen aus dem übergeordneten Ordner .
Die Flags , die dem C++-Compiler beim Übersetzen von Ziel-Quelldateien übergeben werden . Dieser Wert überschreibt gegebenenfalls denjenigen aus dem übergeordneten Ordner .
Nicht installieren
Wenn ausgewählt wird dieses Ziel nicht installiert . Es kann für Werkzeuge verwendet werden , um andere Ziele oder Programme zu erstellen , welche nur von Entwicklern verwendet werden .
Präfix nicht verwenden
Wenn ausgewählt wird kein Präfix zu Handbuchseiten und ausführbare Datei hinzugefügt . Solche Präfixe werden als Alternativen zu Systemwerkzeugen eingesetzt .
Die Flags , die dem Fortran 9x-Compiler beim Übersetzen von Ziel-Quelldateien übergeben werden . Dieser Wert überschreibt gegebenenfalls denjenigen aus dem übergeordneten Ordner .
In Distribution einschließen
Wenn ausgewählt , so wird das Ziel im Distributionspaket enthalten sein .
Installationsordner
Legt fest , wo das Ziel installiert wird . Es ist nicht direkt der Ordner , in dem die Dateien installiert sind , sondern der Name eine der Standardvariable des Ordners ( bindir , sbindir , libdir , libexecdir , datadir , pkgdatadir , pkglibexecdir , includedir , mandir , infodir , docdir ) oder eine eigens definierte Variable in den Ordnereigenschaften .
Die Flags , die dem Java-Compiler beim Übersetzen von Ziel-Quelldateien übergeben werden . Dieser Wert überschreibt gegebenenfalls denjenigen aus dem übergeordneten Ordner .
Zielpfad beibehalten
Wenn ausgewählt wird die Hierarchie des Projektordners bei Dateiinstallation beibehalten .
Die Flags zur Weitergabe an die Scanner-Generatoren Lex oder Flex beim Erstellen von Ziel-Quelldateien . Dieser Wert überschreibt den wahrscheinlich im Elternordner definierten .
Bibliotheken
Nicht-paketierte Bibliotheken hinzufügen
Die Flags , die dem Linker beim Binden von Zielen übergeben werden . Dieser Wert überschreibt gegebenenfalls denjenigen aus dem übergeordneten Ordner .
Abschnitt im Handbuch
Geben Sie den Abschnitt des Handbuchs an , wo die Hilfeseite hinzugefügt werden soll . Gültige Abschnittsnamen enthalten die Ziffern 0 bis 9 sowie die Buchstaben » l « und » n « .
Die Flags , die dem Objective C-Compiler beim Übersetzen von Ziel-Quelldateien übergeben werden . Dieser Wert überschreibt gegebenenfalls denjenigen aus dem übergeordneten Ordner .
Die Flags , die dem Vala-Compiler beim Übersetzen von Ziel-Quelldateien übergeben werden . Dieser Wert überschreibt gegebenenfalls denjenigen aus dem übergeordneten Ordner .
Die Flags , die dem Parser-Ersteller Bison oder Yacc beim Erzeugen von Ziel-Quelldateien übergeben werden . Dieser Wert überschreibt gegebenenfalls denjenigen aus dem übergeordneten Ordner .
Zieltyp der Autotools .
Projekttyp der Autotools
Es stehen verschiedene Typen von Zielen zur Verfügung .
Gemeinsam verwendete Bibliothek ( libtool )
Es repräsentiert eine von mehreren Programmen gemeinsam verwendete Bibliothek , die zur Laufzeit gebunden wird . Dies ist die üblichste Variante einer Bibliothek unter Linux . Sie wird unter Windows » dynamic link library « ( DLL ) genannt .
Es verwendet das Libtool-Paket . Dessen Name muss mit » lib « beginnen und besitzt die Erweiterung » .la « .
Modul ( Libtool )
Repräsentiert eine Bibliothek , oft auch Plugin genannt , die zur Laufzeit explizit vom Programm selbst gebunden wird . Wird verwendet , um nur den Code zu laden , der zu den verwendeten Funktionen gehört .
Es verwendet das Libtool-Paket . Dessen Name ist nicht auf das Präfix » lib « angewiesen , muss aber die Erweiterung » .la « besitzen .
Statische Bibliothek ( Libtool )
Repräsentiert eine Bibliothek , die zur Übersetzungszeit mit dem Programm gebunden wird . Nur die verwendeten Funktionen sind in der erstellten ausführbaren Datei enthalten .
Es verwendet das Libtool-Paket . Dessen Name muss mit » lib « beginnen und besitzt die Erweiterung » .a « .
Programm
Repräsentiert ein übersetztes Programm , z.B. aus C-Quelldateien . Alle Unterelemente stellen die Quelldateien dar , die zu dem Programm übersetzt wurden .
Python-Modul
Es repräsentiert ein in Python geschriebenes Programm .
Java-Modul
Es repräsentiert ein in Java geschriebenes Programm .
LISP-Modul
Es repräsentiert ein in LISP geschriebenes Programm .
Header-Dateien
Dieses Ziel ermöglicht es , Kopfdateien zu gruppieren und zu definieren , wo diese installiert werden müssen .
Man-Dokumentation
Gruppiert Hilfeseiten , die vom Projekt gebraucht werden .
Info-Dokumentation
Gruppiert Infoseiten , die vom Projekt gebraucht werden .
Verschiedene Informationen
Gruppiert Datendateien , die vom Projekt gebraucht werden , wie z.B. Bilder , Oberflächenbeschreibungen , Einstellungsdateien usw.
Skript
Repräsentiert Programme , die Skripte sind . Skripte werden nur in den angegebenen Ordner installiert . Wenn Skripte erstellt werden , so sind zusätzliche Regeln notwendig .
Ziele oder das Projekt erstellen .
Ziele erstellen
Ein Ziel ist eine Datei , die aus Quelldateien erstellt wird . Üblicherweise ist es ein Programm oder eine Bibliothek , aber es kann auch eine Dokumentation sein , falls Weiterverarbeitung in irgendeiner Form notwendig ist .
Der Befehl zur Erstellung kompiliert alle erforderlichen Quelldateien und verlinkt diese gegebenenfalls mit anderen Dateien wie beispielsweise Bibliotheken , um das Ziel zu erstellen . Falls einige Quelldateien bereits kompiliert oder nicht verändert worden sind , so werden diese nicht erneut kompiliert , um Zeit zu sparen . Es gibt mehrere Wege , eine Erstellung anzustoßen .
Erstellen Erstellen Hauptmenü F7
Erstellen Projekt erstellen Hauptmenü Umschalttaste F7
Dateiverwaltungsleiste
Kontextmenü der Dateiverwaltung Erstellen Erstellen
Projektverwaltungsleiste
Kontextmenüs der Projektverwaltung Erstellen Erstellen
Erstellte Dateien entfernen .
Ziele bereinigen
Es kann nützlich sein , alle durch den Erstellungsprozess erstellten Dateien zu löschen . Zum Beispiel , wenn alle Abhängigkeiten nicht berücksichtigt werden und eine veränderte Datei keine erwartete erneute Compilierung auslöst . Das Löschen aller Dateien löst dies. Dies kann auf mehrere Weisen geschehen :
Erstellen Bereinigen Hauptmenü
Erstellen Projekt bereinigen Hauptmenü
Kontextmenü der Dateiverwaltung Erstellen Bereinigen
Kontextmenüs der Projektverwaltung Erstellen Bereinigen
Dateien kompilieren .
Dateien kompilieren
Die meisten Programmiersprachen ermöglichen das Compilieren von einzelnen Quelldateien . Die Datei wird gelesen , auf Syntaxfehler geprüft und in eine vorläufige Objektdatei umgewandelt . Die meisten Fehler passieren in diesem Schritt . Es ist daher sinnvoll , eine Datei nach Bearbeitung zu kompilieren und auf Fehler prüfen zu lassen . Dazu gibt es mehrere Möglichkeiten .
Erstellen Compilieren Hauptmenü F9
Dateiverwaltungsleiste
Kontextmenü der Dateiverwaltung Erstellen Compilieren
Projektverwaltungsleiste
Kontextmenü der Dateiverwaltung Erstellen Compilieren Seitenleiste der Projektverwaltung
Anjuta
Konfigurationsdialog für Autotools
Konfigurationsdialog für Autotools
Konfigurieren
Projekt neu generieren
Anjuta
Konfiguration
Mit diesem Eingabefeld benennen Sie verschiedene Konfigurationen , jede mit eigenen Optionen und eigenem Erstellungsordner . Normalerweise gibt es bereits eine Vorgabe-Konfiguration , eine Fehlerdiagnose-Konfiguration für einfache Fehlerdiagnose ( zwischenläufige Variablen und Befehlsreihenfolge bleiben unberührt ) und eine optimierte Konfiguration , die schnellere Programme bei längerer Erstellungsdauer produziert . Es können zusätzliche eigene Konfigurationen definiert werden .
Erstellungsordner
Wählen Sie den Erstellungsordner . Dieser darf auch der Projektordner oder ein Unterordner sein . Das ist speziell für den Wechsel zwischen verschiedenen Konfigurationen nützlich , um ein erneutes Erstellen des gesamten Projekts zu vermeiden .
Mit Autotools ist es nicht möglich , eine Konfiguration für einen anderen Ordner zu verwenden , wenn bereits eine Konfiguration den Projektordner verwendet . Diese muss zuvor entfernt werden .
Einige Autotools-Projekte können nicht außerhalb der Projektordners erstellt werden . Es können zwar dennoch verschiedene Konfigurationen eingesetzt werden , aber alle müssen den Projektordner verwenden und alles muss bei Konfigurationswechsel neu kompiliert werden .
Konfigurationsoptionen
Dieses Textfeld führt alle vom Konfigurationsvorgang eingesetzten Befehlszeilenargumente auf . Alle Argumente werden durch Leerzeichen getrennt und müssen in Zitatzeichen gesetzt werden , wenn sie Leerzeichen enthalten . Jede Konfiguration schreibt Voreinstelllungen in dieses Feld , welche Sie ändern können .
configure --help configure
Ein Autotools-Projekt konfigurieren und Konfigurationen verwalten .
Ein Projekt konfigurieren
Vor dem Compilieren und Erstellen von Dateien muss ein Autotools-Projekt konfiguriert werden . Dieser Schritt ist zum Einstellen globaler Optionen erforderlich , um zu prüfen , ob alle benötigten Bibliotheken und Programme auf dem System installiert sind , und um die passenden Erstellungsskripte zu generieren .
Das Projekt konfigurieren
Erstellen Projekt konfigurieren Hauptmenü

Ausführen
Die Konfiguration könnte scheitern , wenn einige Bibliotheken oder Programme nicht oder nicht in der richtigen Version installiert sind . Die Fehlermeldung informiert Sie darüber , was genau fehlt .
Die Konfiguration ändern
Erstellen Konfiguration wählen Weitere Konfiguration Hauptmenü
Wenn das Projekt noch nicht konfiguriert wurde , so wird es automatisch vor dem Erstellen einer Datei konfiguriert .
Konfiguration entfernen
Es ist vergleichbar mit dem Bereinigen eines Projekts , aber es werden noch mehr Dateien entfernt . Sie müssen Ihr Projekt danach neu konfigurieren , um es erstellen zu können .
Erstellen Konfiguration entfernen Hauptmenü
Ein Distributionspaket erstellen .
Ein Distributionspaket erstellen
configure make make install
Erstellen Tarball erstellen
Ziele oder das Projekt installieren .
Ziele installieren
/ usr/ local
Es gibt mehrere Möglichkeiten , Ziele oder ein Projekt zu installieren .
Erstellen Installieren Hauptmenü
Erstellen Projekt installieren Hauptmenü
Kontextmenü der Dateiverwaltung Erstellen Installieren
Kontextmenüs der Projektverwaltung Erstellen Installieren
su sudo
Autotools-Erstellungs-Plugin
Dieses Plugin ist für Autotools-Projekte ausgelegt , aber weil diese unter anderem auch » make « einbinden , ist es auch für andere Arten von Projekten geeignet , die auf » make « basieren .
Zu verwendender Make-Befehl
Nachfolgend finden Sie eine Liste der vom Plugin verwendeten Ziele . Sie sind in allen Autotools-Projekten implementiert , aber Sie müssen diese selbst implementieren , wenn Sie ein eigenes » makefile « einsetzen .
objekt_datei_name
Verwenden Sie dies , um eine Quelldatei zu kompilieren . Der Name der Objektdatei wird gebildet , indem die Erweiterung der Quelldatei durch die korrespondierende Objektdatei-Erweiterung ersetzt wird .
make
Verwenden Sie dies , um alle Ziele in einem Ordner zu erstellen .
make install
Verwenden Sie dies , um alle Ziele in einem Ordner zu installieren .
make clean
Verwenden Sie dies , um alle in einem Ordner erstellten Dateien zu löschen .
make dist
Verwenden Sie dies , um ein verteilbares Paket zu erstellen . Es wird nur im Projektordner aufgerufen .
Da » make « über Standardregeln verfügt , ist es möglich , ein C-Programm ohne Makefile zu erstellen und zu linken . Sie können ein C-Programm aus einer einzelnen Quelldatei erstellen , ohne Makefile oder umgebendes Projekt .
Dialog der Einstellungen zur Erstellung mit Autotools .
Dialog der Einstellungen zur Erstellung mit Autotools
Der Dialog ermöglicht das Festlegen globaler Optionen zum Erstellen von Dateien .
Mehrere Befehle zugleich ausführen
make
Bei Fehlern fortfahren
make
Meldungen übersetzen
Anjuta
Erstellungswarnungen und Fehler im Editor hervorheben
Fehlermeldungen und Warnungen während des Erstellungsvorgangs werden im Meldungsfenster angezeigt und hervorgehoben . Wenn Sie diese Option aktivieren , geschieht dies auch im Editorfenster .
Mit Administratorrechten installieren
sudo su
Wird zum Anlegen oder Bearbeiten von Haltepunkten verwendet
Haltepunkt-Dialog
Ort
Die Position des Haltepunkts . Sie kann für einen bestehenden Haltepunkt nicht geändert werden . Der Haltepunkt kann in einer bestimmten Zeilennummer oder an den Beginn einer Funktion festgelegt werden . Verwenden Sie eines der folgenden Formate :
Dateiname Zeilennummer
Funktionsname
Datei Funktionsname
Bedingung
WAHR FALSCH WAHR
WAHR
Durchgang
Die Fehlerdiagnose kann den Haltepunkt für eine bestimmte Anzahl an Durchgängen übergehen . Wenn die Durchgangszahl ungleich Null ist , so wird die Fehlerdiagnose den Haltepunkt eine bestimmte Anzahl Durchgänge durchlaufen , bevor angehalten wird .
Die Durchgangszahl hat höhere Präferenz als die Bedingung . Nur wenn die Durchgangszahl erreicht wurde , wertet die Fehlerdiagnose die Bedingung aus und hält das Programm an , falls diese vorhanden ist .
Verwalten von Haltepunkten .
Haltepunkte
Haltepunkte werden verwendet , um die Ausführung eines Programms an bestimmten Stellen zu unterbrechen , so dass der Zustand des Programms an diesen Stellen genauer untersucht werden kann .
Haltepunkte auflisten
Ansicht Haltepunkte Hauptmenü Haltepunkte
Die Ansicht gliedert sich in folgende Spalten :
Ort
Die Position des Haltepunkts im der Quelldatei . Wenn der Haltepunkt durch die Fehlerdiagnose festgelegt ist , werden zusätzliche Informationen wie die Funktion angezeigt , welche den Haltepunkt enthält .
Adresse
Das Feld enthält die Adresse des Haltepunkts , wenn dieser durch die Fehlerdiagnose festgelegt ist .
Typ
Haltepunkt
Bedingung
Dies ist die Bedingung des Haltepunkts . Falls leer , ist keine Bedingung festgelegt .
Durchgang
Wenn der Debugger nicht läuft , zeigt diese Spalte die Nummer des Durchgangs des Haltepunkts an , oder 0 , falls nichts festgelegt ist .
Wenn der Debugger läuft und die Durchgangsnummer 0 ist , dann zeigt diese Spalte die Anzahl an , wie oft dieser Haltepunkt ausgelöst wurde . Falls die Durchgangsnummer von 0 verschieden ist , werden beide Nummern angezeigt . Die Durchgangsnummer ist die zweite Zahl .
Status
Dies ist der Status des Haltepunkts . Folgende Zustände sind möglich :
Ausstehend :
Der Haltepunkt ist in Ihrem Programm nicht festgelegt .
